
mjime051_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000952  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d3  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011b  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	39 c0       	rjmp	.+114    	; 0x10e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return ((position & (0x01 << k)) != 0);
}

int main(void)
{
	DDRA = 0x00; PORTA = 0x00; // Configure port A's 8 pins as inputs
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xFF; PORTC = 0x00; // Configure port C's 8 pins as outputs,
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
	unsigned char carInfo = 0x00;
	unsigned char lightBits = 0x00;
	while(1)
	{
		// 1) Read Inputs and assign to variables
		fuelLevel = PINA & 0x0F;
  a8:	80 b1       	in	r24, 0x00	; 0
  aa:	8f 70       	andi	r24, 0x0F	; 15
		carInfo = PINA & 0xF0;
  ac:	20 b1       	in	r18, 0x00	; 0
		lightBits = 0x00;
		// 2) Perform Computation
		if (fuelLevel > 0 && fuelLevel < 0x03)
  ae:	9f ef       	ldi	r25, 0xFF	; 255
  b0:	98 0f       	add	r25, r24
  b2:	92 30       	cpi	r25, 0x02	; 2
  b4:	b0 f0       	brcs	.+44     	; 0xe2 <main+0x44>
		{
			lightBits = SetBit(lightBits, 5, 1);
		} 
		else if (fuelLevel == 0x03 || fuelLevel == 0x04)
  b6:	9d ef       	ldi	r25, 0xFD	; 253
  b8:	98 0f       	add	r25, r24
  ba:	92 30       	cpi	r25, 0x02	; 2
  bc:	a0 f0       	brcs	.+40     	; 0xe6 <main+0x48>
		{
			lightBits = SetBit(lightBits, 5, 1);
			lightBits = SetBit(lightBits, 4, 1);
		} 
		else if (fuelLevel == 0x05 || fuelLevel == 0x06)
  be:	9b ef       	ldi	r25, 0xFB	; 251
  c0:	98 0f       	add	r25, r24
  c2:	92 30       	cpi	r25, 0x02	; 2
  c4:	90 f0       	brcs	.+36     	; 0xea <main+0x4c>
		{
			lightBits = lightBits | 0x38;
		} 
		else if (fuelLevel >= 0x07 && fuelLevel <= 0x09)
  c6:	99 ef       	ldi	r25, 0xF9	; 249
  c8:	98 0f       	add	r25, r24
  ca:	93 30       	cpi	r25, 0x03	; 3
  cc:	80 f0       	brcs	.+32     	; 0xee <main+0x50>
		{
			lightBits = lightBits | 0x3C;
		} 
		else if (fuelLevel >= 0x0A && fuelLevel <= 0x0C)
  ce:	96 ef       	ldi	r25, 0xF6	; 246
  d0:	98 0f       	add	r25, r24
  d2:	93 30       	cpi	r25, 0x03	; 3
  d4:	70 f0       	brcs	.+28     	; 0xf2 <main+0x54>
		{
			lightBits = lightBits | 0x3E;
		} 
		else if (fuelLevel >= 0x0D && fuelLevel <=0x0F)
  d6:	93 ef       	ldi	r25, 0xF3	; 243
  d8:	98 0f       	add	r25, r24
  da:	93 30       	cpi	r25, 0x03	; 3
  dc:	60 f4       	brcc	.+24     	; 0xf6 <main+0x58>
		{
			lightBits = lightBits | 0x3F;
  de:	9f e3       	ldi	r25, 0x3F	; 63
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <main+0x5a>
		carInfo = PINA & 0xF0;
		lightBits = 0x00;
		// 2) Perform Computation
		if (fuelLevel > 0 && fuelLevel < 0x03)
		{
			lightBits = SetBit(lightBits, 5, 1);
  e2:	90 e2       	ldi	r25, 0x20	; 32
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <main+0x5a>
		} 
		else if (fuelLevel == 0x03 || fuelLevel == 0x04)
		{
			lightBits = SetBit(lightBits, 5, 1);
			lightBits = SetBit(lightBits, 4, 1);
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <main+0x5a>
		} 
		else if (fuelLevel == 0x05 || fuelLevel == 0x06)
		{
			lightBits = lightBits | 0x38;
  ea:	98 e3       	ldi	r25, 0x38	; 56
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <main+0x5a>
		} 
		else if (fuelLevel >= 0x07 && fuelLevel <= 0x09)
		{
			lightBits = lightBits | 0x3C;
  ee:	9c e3       	ldi	r25, 0x3C	; 60
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <main+0x5a>
		} 
		else if (fuelLevel >= 0x0A && fuelLevel <= 0x0C)
		{
			lightBits = lightBits | 0x3E;
  f2:	9e e3       	ldi	r25, 0x3E	; 62
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <main+0x5a>
	while(1)
	{
		// 1) Read Inputs and assign to variables
		fuelLevel = PINA & 0x0F;
		carInfo = PINA & 0xF0;
		lightBits = 0x00;
  f6:	90 e0       	ldi	r25, 0x00	; 0
		else if (fuelLevel >= 0x0D && fuelLevel <=0x0F)
		{
			lightBits = lightBits | 0x3F;
		}
		
		if (fuelLevel <= 0x04)
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	08 f4       	brcc	.+2      	; 0xfe <main+0x60>
#include <avr/io.h>


// Bit-access function
unsigned char SetBit(unsigned char changedBin, unsigned char position, unsigned char newBit) {
	return (newBit ? changedBin | (0x01 << position) : changedBin & ~(0x01 << position));
  fc:	90 64       	ori	r25, 0x40	; 64
		if (fuelLevel <= 0x04)
		{
			lightBits = SetBit(lightBits, 6, 1);
		}
		
		if ((GetBit(carInfo, 4) == 1) && (GetBit(carInfo, 5) == 1) && (GetBit(carInfo, 6) == 0))
  fe:	82 2f       	mov	r24, r18
 100:	80 73       	andi	r24, 0x30	; 48
 102:	80 33       	cpi	r24, 0x30	; 48
 104:	11 f4       	brne	.+4      	; 0x10a <main+0x6c>
 106:	26 ff       	sbrs	r18, 6
#include <avr/io.h>


// Bit-access function
unsigned char SetBit(unsigned char changedBin, unsigned char position, unsigned char newBit) {
	return (newBit ? changedBin | (0x01 << position) : changedBin & ~(0x01 << position));
 108:	90 68       	ori	r25, 0x80	; 128
		if ((GetBit(carInfo, 4) == 1) && (GetBit(carInfo, 5) == 1) && (GetBit(carInfo, 6) == 0))
		{
			lightBits = SetBit(lightBits, 7, 1);
		}
		
		PORTC = lightBits;
 10a:	98 b9       	out	0x08, r25	; 8
	}
 10c:	cd cf       	rjmp	.-102    	; 0xa8 <main+0xa>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
