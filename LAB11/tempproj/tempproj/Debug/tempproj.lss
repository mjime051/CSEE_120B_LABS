
tempproj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000572  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000572  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  0000060a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d4  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e3  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094b  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000691  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000745  00000000  00000000  000034c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003c06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	f4 c1       	rjmp	.+1000   	; 0x41e <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e4 01       	movw	r28, r8
  8e:	e1 01       	movw	r28, r2
  90:	e1 01       	movw	r28, r2
  92:	e1 01       	movw	r28, r2
  94:	e1 01       	movw	r28, r2
  96:	e1 01       	movw	r28, r2
  98:	e1 01       	movw	r28, r2
  9a:	e1 01       	movw	r28, r2
  9c:	e1 01       	movw	r28, r2
  9e:	e1 01       	movw	r28, r2
  a0:	e1 01       	movw	r28, r2
  a2:	e1 01       	movw	r28, r2
  a4:	e1 01       	movw	r28, r2
  a6:	e1 01       	movw	r28, r2
  a8:	e1 01       	movw	r28, r2
  aa:	e1 01       	movw	r28, r2
  ac:	e1 01       	movw	r28, r2
  ae:	e1 01       	movw	r28, r2
  b0:	e1 01       	movw	r28, r2
  b2:	e1 01       	movw	r28, r2
  b4:	e1 01       	movw	r28, r2
  b6:	e1 01       	movw	r28, r2
  b8:	e1 01       	movw	r28, r2
  ba:	e1 01       	movw	r28, r2
  bc:	e1 01       	movw	r28, r2
  be:	e1 01       	movw	r28, r2
  c0:	e1 01       	movw	r28, r2
  c2:	e1 01       	movw	r28, r2
  c4:	e1 01       	movw	r28, r2
  c6:	e1 01       	movw	r28, r2
  c8:	e1 01       	movw	r28, r2
  ca:	e1 01       	movw	r28, r2
  cc:	e1 01       	movw	r28, r2
  ce:	e1 01       	movw	r28, r2
  d0:	e1 01       	movw	r28, r2
  d2:	d7 01       	movw	r26, r14
  d4:	e1 01       	movw	r28, r2
  d6:	e1 01       	movw	r28, r2
  d8:	e1 01       	movw	r28, r2
  da:	e1 01       	movw	r28, r2
  dc:	e1 01       	movw	r28, r2
  de:	e1 01       	movw	r28, r2
  e0:	c4 01       	movw	r24, r8
  e2:	e1 01       	movw	r28, r2
  e4:	e1 01       	movw	r28, r2
  e6:	e1 01       	movw	r28, r2
  e8:	e1 01       	movw	r28, r2
  ea:	e1 01       	movw	r28, r2
  ec:	ce 01       	movw	r24, r28
  ee:	43 01       	movw	r8, r6
  f0:	4c 01       	movw	r8, r24
  f2:	56 01       	movw	r10, r12
  f4:	60 01       	movw	r12, r0
  f6:	6a 01       	movw	r12, r20
  f8:	74 01       	movw	r14, r8
  fa:	7e 01       	movw	r14, r28
  fc:	88 01       	movw	r16, r16
  fe:	92 01       	movw	r18, r4
 100:	e1 01       	movw	r28, r2
 102:	e1 01       	movw	r28, r2
 104:	e1 01       	movw	r28, r2
 106:	e1 01       	movw	r28, r2
 108:	e1 01       	movw	r28, r2
 10a:	e1 01       	movw	r28, r2
 10c:	e1 01       	movw	r28, r2
 10e:	9c 01       	movw	r18, r24
 110:	a6 01       	movw	r20, r12
 112:	b0 01       	movw	r22, r0
 114:	ba 01       	movw	r22, r20

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e2 e7       	ldi	r30, 0x72	; 114
 12a:	f5 e0       	ldi	r31, 0x05	; 5
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a4 30       	cpi	r26, 0x04	; 4
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a4 e0       	ldi	r26, 0x04	; 4
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a5 31       	cpi	r26, 0x15	; 21
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	b5 d1       	rcall	.+874    	; 0x4b8 <main>
 14e:	0f c2       	rjmp	.+1054   	; 0x56e <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <delay_ms>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 152:	18 16       	cp	r1, r24
 154:	19 06       	cpc	r1, r25
 156:	5c f0       	brlt	.+22     	; 0x16e <delay_ms+0x1c>
 158:	08 95       	ret
 15a:	00 00       	nop
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
 160:	e1 f7       	brne	.-8      	; 0x15a <delay_ms+0x8>
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	84 17       	cp	r24, r20
 168:	95 07       	cpc	r25, r21
 16a:	19 f4       	brne	.+6      	; 0x172 <delay_ms+0x20>
 16c:	08 95       	ret
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	27 e0       	ldi	r18, 0x07	; 7
 174:	33 e0       	ldi	r19, 0x03	; 3
 176:	f1 cf       	rjmp	.-30     	; 0x15a <delay_ms+0x8>

00000178 <LCD_WriteCommand>:
 178:	10 98       	cbi	0x02, 0	; 2
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	11 9a       	sbi	0x02, 1	; 2
 17e:	00 00       	nop
 180:	11 98       	cbi	0x02, 1	; 2
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	e5 cf       	rjmp	.-54     	; 0x152 <delay_ms>
 188:	08 95       	ret

0000018a <LCD_Cursor>:
 18a:	81 31       	cpi	r24, 0x11	; 17
 18c:	18 f4       	brcc	.+6      	; 0x194 <LCD_Cursor+0xa>
 18e:	81 58       	subi	r24, 0x81	; 129
 190:	f3 cf       	rjmp	.-26     	; 0x178 <LCD_WriteCommand>
 192:	08 95       	ret
 194:	81 55       	subi	r24, 0x51	; 81
 196:	f0 cf       	rjmp	.-32     	; 0x178 <LCD_WriteCommand>
 198:	08 95       	ret

0000019a <LCD_init>:
 19a:	84 e6       	ldi	r24, 0x64	; 100
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	d9 df       	rcall	.-78     	; 0x152 <delay_ms>
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	ea df       	rcall	.-44     	; 0x178 <LCD_WriteCommand>
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	e8 df       	rcall	.-48     	; 0x178 <LCD_WriteCommand>
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	e6 df       	rcall	.-52     	; 0x178 <LCD_WriteCommand>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	e4 df       	rcall	.-56     	; 0x178 <LCD_WriteCommand>
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	ce cf       	rjmp	.-100    	; 0x152 <delay_ms>
 1b6:	08 95       	ret

000001b8 <LCD_WriteData>:
 1b8:	10 9a       	sbi	0x02, 0	; 2
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	11 9a       	sbi	0x02, 1	; 2
 1be:	00 00       	nop
 1c0:	11 98       	cbi	0x02, 1	; 2
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	c5 cf       	rjmp	.-118    	; 0x152 <delay_ms>
 1c8:	08 95       	ret

000001ca <GetKeypadKey>:
 1ca:	8f ee       	ldi	r24, 0xEF	; 239
 1cc:	88 b9       	out	0x08, r24	; 8
 1ce:	00 00       	nop
 1d0:	30 9b       	sbis	0x06, 0	; 6
 1d2:	29 c0       	rjmp	.+82     	; 0x226 <GetKeypadKey+0x5c>
 1d4:	31 9b       	sbis	0x06, 1	; 6
 1d6:	29 c0       	rjmp	.+82     	; 0x22a <GetKeypadKey+0x60>
 1d8:	32 9b       	sbis	0x06, 2	; 6
 1da:	29 c0       	rjmp	.+82     	; 0x22e <GetKeypadKey+0x64>
 1dc:	33 9b       	sbis	0x06, 3	; 6
 1de:	29 c0       	rjmp	.+82     	; 0x232 <GetKeypadKey+0x68>
 1e0:	8f ed       	ldi	r24, 0xDF	; 223
 1e2:	88 b9       	out	0x08, r24	; 8
 1e4:	00 00       	nop
 1e6:	30 9b       	sbis	0x06, 0	; 6
 1e8:	26 c0       	rjmp	.+76     	; 0x236 <GetKeypadKey+0x6c>
 1ea:	31 9b       	sbis	0x06, 1	; 6
 1ec:	26 c0       	rjmp	.+76     	; 0x23a <GetKeypadKey+0x70>
 1ee:	32 9b       	sbis	0x06, 2	; 6
 1f0:	26 c0       	rjmp	.+76     	; 0x23e <GetKeypadKey+0x74>
 1f2:	33 9b       	sbis	0x06, 3	; 6
 1f4:	26 c0       	rjmp	.+76     	; 0x242 <GetKeypadKey+0x78>
 1f6:	8f eb       	ldi	r24, 0xBF	; 191
 1f8:	88 b9       	out	0x08, r24	; 8
 1fa:	00 00       	nop
 1fc:	30 9b       	sbis	0x06, 0	; 6
 1fe:	23 c0       	rjmp	.+70     	; 0x246 <GetKeypadKey+0x7c>
 200:	31 9b       	sbis	0x06, 1	; 6
 202:	23 c0       	rjmp	.+70     	; 0x24a <GetKeypadKey+0x80>
 204:	32 9b       	sbis	0x06, 2	; 6
 206:	23 c0       	rjmp	.+70     	; 0x24e <GetKeypadKey+0x84>
 208:	33 9b       	sbis	0x06, 3	; 6
 20a:	23 c0       	rjmp	.+70     	; 0x252 <GetKeypadKey+0x88>
 20c:	8f e7       	ldi	r24, 0x7F	; 127
 20e:	88 b9       	out	0x08, r24	; 8
 210:	00 00       	nop
 212:	30 9b       	sbis	0x06, 0	; 6
 214:	20 c0       	rjmp	.+64     	; 0x256 <GetKeypadKey+0x8c>
 216:	31 9b       	sbis	0x06, 1	; 6
 218:	20 c0       	rjmp	.+64     	; 0x25a <GetKeypadKey+0x90>
 21a:	32 9b       	sbis	0x06, 2	; 6
 21c:	20 c0       	rjmp	.+64     	; 0x25e <GetKeypadKey+0x94>
 21e:	33 9b       	sbis	0x06, 3	; 6
 220:	20 c0       	rjmp	.+64     	; 0x262 <GetKeypadKey+0x98>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
 226:	81 e3       	ldi	r24, 0x31	; 49
 228:	08 95       	ret
 22a:	84 e3       	ldi	r24, 0x34	; 52
 22c:	08 95       	ret
 22e:	87 e3       	ldi	r24, 0x37	; 55
 230:	08 95       	ret
 232:	8a e2       	ldi	r24, 0x2A	; 42
 234:	08 95       	ret
 236:	82 e3       	ldi	r24, 0x32	; 50
 238:	08 95       	ret
 23a:	85 e3       	ldi	r24, 0x35	; 53
 23c:	08 95       	ret
 23e:	88 e3       	ldi	r24, 0x38	; 56
 240:	08 95       	ret
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	08 95       	ret
 246:	83 e3       	ldi	r24, 0x33	; 51
 248:	08 95       	ret
 24a:	86 e3       	ldi	r24, 0x36	; 54
 24c:	08 95       	ret
 24e:	89 e3       	ldi	r24, 0x39	; 57
 250:	08 95       	ret
 252:	83 e2       	ldi	r24, 0x23	; 35
 254:	08 95       	ret
 256:	81 e4       	ldi	r24, 0x41	; 65
 258:	08 95       	ret
 25a:	82 e4       	ldi	r24, 0x42	; 66
 25c:	08 95       	ret
 25e:	83 e4       	ldi	r24, 0x43	; 67
 260:	08 95       	ret
 262:	84 e4       	ldi	r24, 0x44	; 68
 264:	08 95       	ret

00000266 <SMTick1>:
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ec 01       	movw	r28, r24
 26c:	ae df       	rcall	.-164    	; 0x1ca <GetKeypadKey>
 26e:	20 97       	sbiw	r28, 0x00	; 0
 270:	09 f0       	breq	.+2      	; 0x274 <SMTick1+0xe>
 272:	ad c0       	rjmp	.+346    	; 0x3ce <SMTick1+0x168>
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	85 34       	cpi	r24, 0x45	; 69
 278:	91 05       	cpc	r25, r1
 27a:	08 f0       	brcs	.+2      	; 0x27e <SMTick1+0x18>
 27c:	a2 c0       	rjmp	.+324    	; 0x3c2 <SMTick1+0x15c>
 27e:	fc 01       	movw	r30, r24
 280:	ea 5b       	subi	r30, 0xBA	; 186
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	6b c1       	rjmp	.+726    	; 0x55c <__tablejump2__>
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 28c:	7e df       	rcall	.-260    	; 0x18a <LCD_Cursor>
 28e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 292:	80 5d       	subi	r24, 0xD0	; 208
 294:	91 df       	rcall	.-222    	; 0x1b8 <LCD_WriteData>
 296:	98 c0       	rjmp	.+304    	; 0x3c8 <SMTick1+0x162>
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	74 df       	rcall	.-280    	; 0x18a <LCD_Cursor>
 2a2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 2a6:	80 5d       	subi	r24, 0xD0	; 208
 2a8:	87 df       	rcall	.-242    	; 0x1b8 <LCD_WriteData>
 2aa:	8e c0       	rjmp	.+284    	; 0x3c8 <SMTick1+0x162>
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	6a df       	rcall	.-300    	; 0x18a <LCD_Cursor>
 2b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 2ba:	80 5d       	subi	r24, 0xD0	; 208
 2bc:	7d df       	rcall	.-262    	; 0x1b8 <LCD_WriteData>
 2be:	84 c0       	rjmp	.+264    	; 0x3c8 <SMTick1+0x162>
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	60 df       	rcall	.-320    	; 0x18a <LCD_Cursor>
 2ca:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	73 df       	rcall	.-282    	; 0x1b8 <LCD_WriteData>
 2d2:	7a c0       	rjmp	.+244    	; 0x3c8 <SMTick1+0x162>
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	56 df       	rcall	.-340    	; 0x18a <LCD_Cursor>
 2de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 2e2:	80 5d       	subi	r24, 0xD0	; 208
 2e4:	69 df       	rcall	.-302    	; 0x1b8 <LCD_WriteData>
 2e6:	70 c0       	rjmp	.+224    	; 0x3c8 <SMTick1+0x162>
 2e8:	86 e0       	ldi	r24, 0x06	; 6
 2ea:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	4c df       	rcall	.-360    	; 0x18a <LCD_Cursor>
 2f2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 2f6:	80 5d       	subi	r24, 0xD0	; 208
 2f8:	5f df       	rcall	.-322    	; 0x1b8 <LCD_WriteData>
 2fa:	66 c0       	rjmp	.+204    	; 0x3c8 <SMTick1+0x162>
 2fc:	87 e0       	ldi	r24, 0x07	; 7
 2fe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	42 df       	rcall	.-380    	; 0x18a <LCD_Cursor>
 306:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 30a:	80 5d       	subi	r24, 0xD0	; 208
 30c:	55 df       	rcall	.-342    	; 0x1b8 <LCD_WriteData>
 30e:	5c c0       	rjmp	.+184    	; 0x3c8 <SMTick1+0x162>
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	38 df       	rcall	.-400    	; 0x18a <LCD_Cursor>
 31a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 31e:	80 5d       	subi	r24, 0xD0	; 208
 320:	4b df       	rcall	.-362    	; 0x1b8 <LCD_WriteData>
 322:	52 c0       	rjmp	.+164    	; 0x3c8 <SMTick1+0x162>
 324:	89 e0       	ldi	r24, 0x09	; 9
 326:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	2e df       	rcall	.-420    	; 0x18a <LCD_Cursor>
 32e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 332:	80 5d       	subi	r24, 0xD0	; 208
 334:	41 df       	rcall	.-382    	; 0x1b8 <LCD_WriteData>
 336:	48 c0       	rjmp	.+144    	; 0x3c8 <SMTick1+0x162>
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	24 df       	rcall	.-440    	; 0x18a <LCD_Cursor>
 342:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 346:	89 5c       	subi	r24, 0xC9	; 201
 348:	37 df       	rcall	.-402    	; 0x1b8 <LCD_WriteData>
 34a:	3e c0       	rjmp	.+124    	; 0x3c8 <SMTick1+0x162>
 34c:	8b e0       	ldi	r24, 0x0B	; 11
 34e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	1a df       	rcall	.-460    	; 0x18a <LCD_Cursor>
 356:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 35a:	89 5c       	subi	r24, 0xC9	; 201
 35c:	2d df       	rcall	.-422    	; 0x1b8 <LCD_WriteData>
 35e:	34 c0       	rjmp	.+104    	; 0x3c8 <SMTick1+0x162>
 360:	8c e0       	ldi	r24, 0x0C	; 12
 362:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	10 df       	rcall	.-480    	; 0x18a <LCD_Cursor>
 36a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 36e:	89 5c       	subi	r24, 0xC9	; 201
 370:	23 df       	rcall	.-442    	; 0x1b8 <LCD_WriteData>
 372:	2a c0       	rjmp	.+84     	; 0x3c8 <SMTick1+0x162>
 374:	8d e0       	ldi	r24, 0x0D	; 13
 376:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	06 df       	rcall	.-500    	; 0x18a <LCD_Cursor>
 37e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 382:	89 5c       	subi	r24, 0xC9	; 201
 384:	19 df       	rcall	.-462    	; 0x1b8 <LCD_WriteData>
 386:	20 c0       	rjmp	.+64     	; 0x3c8 <SMTick1+0x162>
 388:	8e e0       	ldi	r24, 0x0E	; 14
 38a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	fc de       	rcall	.-520    	; 0x18a <LCD_Cursor>
 392:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 396:	84 5e       	subi	r24, 0xE4	; 228
 398:	0f df       	rcall	.-482    	; 0x1b8 <LCD_WriteData>
 39a:	16 c0       	rjmp	.+44     	; 0x3c8 <SMTick1+0x162>
 39c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <tempB>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	f3 de       	rcall	.-538    	; 0x18a <LCD_Cursor>
 3a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 3a8:	80 5d       	subi	r24, 0xD0	; 208
 3aa:	06 df       	rcall	.-500    	; 0x1b8 <LCD_WriteData>
 3ac:	0d c0       	rjmp	.+26     	; 0x3c8 <SMTick1+0x162>
 3ae:	8f e0       	ldi	r24, 0x0F	; 15
 3b0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	e9 de       	rcall	.-558    	; 0x18a <LCD_Cursor>
 3b8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 3bc:	8c 5e       	subi	r24, 0xEC	; 236
 3be:	fc de       	rcall	.-520    	; 0x1b8 <LCD_WriteData>
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <SMTick1+0x162>
 3c2:	8b e1       	ldi	r24, 0x1B	; 27
 3c4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tempB>
 3c8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tempB>
 3cc:	85 b9       	out	0x05, r24	; 5
 3ce:	ce 01       	movw	r24, r28
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <TimerOn>:
 3d6:	8b e0       	ldi	r24, 0x0B	; 11
 3d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3dc:	8d e7       	ldi	r24, 0x7D	; 125
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3e8:	ef e6       	ldi	r30, 0x6F	; 111
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	80 83       	st	Z, r24
 3f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 402:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 406:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 40a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 40e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 412:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 416:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 41a:	78 94       	sei
 41c:	08 95       	ret

0000041e <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 430:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 434:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 438:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 43c:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	a1 09       	sbc	r26, r1
 444:	b1 09       	sbc	r27, r1
 446:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 44a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 44e:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 452:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 456:	89 2b       	or	r24, r25
 458:	8a 2b       	or	r24, r26
 45a:	8b 2b       	or	r24, r27
 45c:	99 f4       	brne	.+38     	; 0x484 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 464:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 468:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 46c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 470:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 474:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 478:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 47c:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 480:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
	}
}
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 496:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 49a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 49e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 4a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 4a6:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <_avr_timer_cntcurr>
 4aa:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <_avr_timer_cntcurr+0x1>
 4ae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr+0x2>
 4b2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x3>
 4b6:	08 95       	ret

000004b8 <main>:
}


int main()
{
	DDRA = 0xFF; PORTA = 0x00;
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	81 b9       	out	0x01, r24	; 1
 4bc:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 4be:	84 b9       	out	0x04, r24	; 4
 4c0:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7-4 outputs, PC3-0 inputs
 4c2:	90 ef       	ldi	r25, 0xF0	; 240
 4c4:	97 b9       	out	0x07, r25	; 7
 4c6:	9f e0       	ldi	r25, 0x0F	; 15
 4c8:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 4ca:	8a b9       	out	0x0a, r24	; 10
 4cc:	1b b8       	out	0x0b, r1	; 11
	static task task1;
	task *tasks[] = { &task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = 0;//Task initial state.
 4ce:	e4 e0       	ldi	r30, 0x04	; 4
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	10 82       	st	Z, r1
	task1.period = SMTick1_period;//Task Period.
 4d4:	82 e3       	ldi	r24, 0x32	; 50
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	a0 e0       	ldi	r26, 0x00	; 0
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	81 83       	std	Z+1, r24	; 0x01
 4de:	92 83       	std	Z+2, r25	; 0x02
 4e0:	a3 83       	std	Z+3, r26	; 0x03
 4e2:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 4e4:	85 83       	std	Z+5, r24	; 0x05
 4e6:	96 83       	std	Z+6, r25	; 0x06
 4e8:	a7 83       	std	Z+7, r26	; 0x07
 4ea:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 4ec:	83 e3       	ldi	r24, 0x33	; 51
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	92 87       	std	Z+10, r25	; 0x0a
 4f2:	81 87       	std	Z+9, r24	; 0x09


	// Set the timer and turn it on
	TimerSet(GCD);
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	cc df       	rcall	.-104    	; 0x496 <TimerSet>
	TimerOn();
 4fe:	6b df       	rcall	.-298    	; 0x3d6 <TimerOn>
	
	//initialize LCD
	LCD_init();
 500:	4c de       	rcall	.-872    	; 0x19a <LCD_init>
 502:	c4 e0       	ldi	r28, 0x04	; 4
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime >= tasks[i]->period ) {
 504:	d1 e0       	ldi	r29, 0x01	; 1
 506:	4d 81       	ldd	r20, Y+5	; 0x05
 508:	5e 81       	ldd	r21, Y+6	; 0x06
 50a:	6f 81       	ldd	r22, Y+7	; 0x07
 50c:	78 85       	ldd	r23, Y+8	; 0x08
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	9a 81       	ldd	r25, Y+2	; 0x02
 512:	ab 81       	ldd	r26, Y+3	; 0x03
 514:	bc 81       	ldd	r27, Y+4	; 0x04
 516:	48 17       	cp	r20, r24
 518:	59 07       	cpc	r21, r25
 51a:	6a 07       	cpc	r22, r26
 51c:	7b 07       	cpc	r23, r27
 51e:	60 f0       	brcs	.+24     	; 0x538 <main+0x80>
 520:	88 81       	ld	r24, Y
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 522:	e9 85       	ldd	r30, Y+9	; 0x09
 524:	fa 85       	ldd	r31, Y+10	; 0x0a
 526:	08 2e       	mov	r0, r24
 528:	00 0c       	add	r0, r0
 52a:	99 0b       	sbc	r25, r25
 52c:	09 95       	icall
 52e:	88 83       	st	Y, r24
 530:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 532:	1e 82       	std	Y+6, r1	; 0x06
 534:	1f 82       	std	Y+7, r1	; 0x07
 536:	18 86       	std	Y+8, r1	; 0x08
 538:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 53a:	9e 81       	ldd	r25, Y+6	; 0x06
 53c:	af 81       	ldd	r26, Y+7	; 0x07
 53e:	b8 85       	ldd	r27, Y+8	; 0x08
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	a1 1d       	adc	r26, r1
 544:	b1 1d       	adc	r27, r1
 546:	8d 83       	std	Y+5, r24	; 0x05
 548:	9e 83       	std	Y+6, r25	; 0x06
 54a:	af 83       	std	Y+7, r26	; 0x07
 54c:	b8 87       	std	Y+8, r27	; 0x08
 54e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <TimerFlag>
		}
		while(!TimerFlag);
 552:	88 23       	and	r24, r24
 554:	e1 f3       	breq	.-8      	; 0x54e <main+0x96>
 556:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TimerFlag>
		TimerFlag = 0;
 55a:	d5 cf       	rjmp	.-86     	; 0x506 <main+0x4e>

0000055c <__tablejump2__>:
	}
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	00 24       	eor	r0, r0
 562:	00 1c       	adc	r0, r0
 564:	0b be       	out	0x3b, r0	; 59
 566:	07 90       	elpm	r0, Z+
 568:	f6 91       	elpm	r31, Z
 56a:	e0 2d       	mov	r30, r0
 56c:	09 94       	ijmp

0000056e <_exit>:
 56e:	f8 94       	cli

00000570 <__stop_program>:
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stop_program>
