
mjime051_lab11_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000290  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc0  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fc  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000588  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a9  00000000  00000000  00002367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a7 d0       	rcall	.+334    	; 0x1f8 <main>
  aa:	b6 c0       	rjmp	.+364    	; 0x218 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <delay_ms>:
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
}
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	5c f0       	brlt	.+22     	; 0xca <delay_ms+0x1c>
  b4:	08 95       	ret
  b6:	00 00       	nop
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
  bc:	e1 f7       	brne	.-8      	; 0xb6 <delay_ms+0x8>
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	84 17       	cp	r24, r20
  c4:	95 07       	cpc	r25, r21
  c6:	19 f4       	brne	.+6      	; 0xce <delay_ms+0x20>
  c8:	08 95       	ret
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	27 e0       	ldi	r18, 0x07	; 7
  d0:	33 e0       	ldi	r19, 0x03	; 3
  d2:	f1 cf       	rjmp	.-30     	; 0xb6 <delay_ms+0x8>

000000d4 <LCD_WriteCommand>:
  d4:	10 98       	cbi	0x02, 0	; 2
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	11 9a       	sbi	0x02, 1	; 2
  da:	00 00       	nop
  dc:	11 98       	cbi	0x02, 1	; 2
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	e5 cf       	rjmp	.-54     	; 0xae <delay_ms>
  e4:	08 95       	ret

000000e6 <LCD_Cursor>:
  e6:	81 31       	cpi	r24, 0x11	; 17
  e8:	18 f4       	brcc	.+6      	; 0xf0 <LCD_Cursor+0xa>
  ea:	81 58       	subi	r24, 0x81	; 129
  ec:	f3 cf       	rjmp	.-26     	; 0xd4 <LCD_WriteCommand>
  ee:	08 95       	ret
  f0:	81 55       	subi	r24, 0x51	; 81
  f2:	f0 cf       	rjmp	.-32     	; 0xd4 <LCD_WriteCommand>
  f4:	08 95       	ret

000000f6 <LCD_init>:
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	d9 df       	rcall	.-78     	; 0xae <delay_ms>
  fc:	88 e3       	ldi	r24, 0x38	; 56
  fe:	ea df       	rcall	.-44     	; 0xd4 <LCD_WriteCommand>
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	e8 df       	rcall	.-48     	; 0xd4 <LCD_WriteCommand>
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	e6 df       	rcall	.-52     	; 0xd4 <LCD_WriteCommand>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	e4 df       	rcall	.-56     	; 0xd4 <LCD_WriteCommand>
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ce cf       	rjmp	.-100    	; 0xae <delay_ms>
 112:	08 95       	ret

00000114 <LCD_WriteData>:
 114:	10 9a       	sbi	0x02, 0	; 2
 116:	8b b9       	out	0x0b, r24	; 11
 118:	11 9a       	sbi	0x02, 1	; 2
 11a:	00 00       	nop
 11c:	11 98       	cbi	0x02, 1	; 2
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	c5 cf       	rjmp	.-118    	; 0xae <delay_ms>
 124:	08 95       	ret

00000126 <GetKeypadKey>:
PC2 3   7 | 8 | 9 | C
PC3 4   * | 0 | # | D
*/
unsigned char GetKeypadKey() {

	PORTC = 0xEF; // Enable col 4 with 0, disable others with 1’s
 126:	8f ee       	ldi	r24, 0xEF	; 239
 128:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 12a:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('1'); }
 12c:	30 9b       	sbis	0x06, 0	; 6
 12e:	29 c0       	rjmp	.+82     	; 0x182 <GetKeypadKey+0x5c>
	if (GetBit(PINC,1)==0) { return('4'); }
 130:	31 9b       	sbis	0x06, 1	; 6
 132:	29 c0       	rjmp	.+82     	; 0x186 <GetKeypadKey+0x60>
	if (GetBit(PINC,2)==0) { return('7'); }
 134:	32 9b       	sbis	0x06, 2	; 6
 136:	29 c0       	rjmp	.+82     	; 0x18a <GetKeypadKey+0x64>
	if (GetBit(PINC,3)==0) { return('*'); }
 138:	33 9b       	sbis	0x06, 3	; 6
 13a:	29 c0       	rjmp	.+82     	; 0x18e <GetKeypadKey+0x68>

	// Check keys in col 2
	PORTC = 0xDF; // Enable col 5 with 0, disable others with 1’s
 13c:	8f ed       	ldi	r24, 0xDF	; 223
 13e:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 140:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('2'); }
 142:	30 9b       	sbis	0x06, 0	; 6
 144:	26 c0       	rjmp	.+76     	; 0x192 <GetKeypadKey+0x6c>
	if (GetBit(PINC,1)==0) { return('5'); }
 146:	31 9b       	sbis	0x06, 1	; 6
 148:	26 c0       	rjmp	.+76     	; 0x196 <GetKeypadKey+0x70>
	if (GetBit(PINC,2)==0) { return('8'); }
 14a:	32 9b       	sbis	0x06, 2	; 6
 14c:	26 c0       	rjmp	.+76     	; 0x19a <GetKeypadKey+0x74>
	if (GetBit(PINC,3)==0) { return('0'); }
 14e:	33 9b       	sbis	0x06, 3	; 6
 150:	26 c0       	rjmp	.+76     	; 0x19e <GetKeypadKey+0x78>

	// Check keys in col 3
	PORTC = 0xBF; // Enable col 6 with 0, disable others with 1’s
 152:	8f eb       	ldi	r24, 0xBF	; 191
 154:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 156:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('3'); }
 158:	30 9b       	sbis	0x06, 0	; 6
 15a:	23 c0       	rjmp	.+70     	; 0x1a2 <GetKeypadKey+0x7c>
	if (GetBit(PINC,1)==0) { return('6'); }
 15c:	31 9b       	sbis	0x06, 1	; 6
 15e:	23 c0       	rjmp	.+70     	; 0x1a6 <GetKeypadKey+0x80>
	if (GetBit(PINC,2)==0) { return('9'); }
 160:	32 9b       	sbis	0x06, 2	; 6
 162:	23 c0       	rjmp	.+70     	; 0x1aa <GetKeypadKey+0x84>
	if (GetBit(PINC,3)==0) { return('#'); }
 164:	33 9b       	sbis	0x06, 3	; 6
 166:	23 c0       	rjmp	.+70     	; 0x1ae <GetKeypadKey+0x88>

	// Check keys in col 4	
	PORTC = 0x7F; // Enable col 6 with 0, disable others with 1’s
 168:	8f e7       	ldi	r24, 0x7F	; 127
 16a:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 16c:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('A'); }
 16e:	30 9b       	sbis	0x06, 0	; 6
 170:	20 c0       	rjmp	.+64     	; 0x1b2 <GetKeypadKey+0x8c>
	if (GetBit(PINC,1)==0) { return('B'); }
 172:	31 9b       	sbis	0x06, 1	; 6
 174:	20 c0       	rjmp	.+64     	; 0x1b6 <GetKeypadKey+0x90>
	if (GetBit(PINC,2)==0) { return('C'); }
 176:	32 9b       	sbis	0x06, 2	; 6
 178:	20 c0       	rjmp	.+64     	; 0x1ba <GetKeypadKey+0x94>
	if (GetBit(PINC,3)==0) { return('D'); }
 17a:	33 9b       	sbis	0x06, 3	; 6
 17c:	20 c0       	rjmp	.+64     	; 0x1be <GetKeypadKey+0x98>

	return('\0'); // default value
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret
*/
unsigned char GetKeypadKey() {

	PORTC = 0xEF; // Enable col 4 with 0, disable others with 1’s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('1'); }
 182:	81 e3       	ldi	r24, 0x31	; 49
 184:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('4'); }
 186:	84 e3       	ldi	r24, 0x34	; 52
 188:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('7'); }
 18a:	87 e3       	ldi	r24, 0x37	; 55
 18c:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('*'); }
 18e:	8a e2       	ldi	r24, 0x2A	; 42
 190:	08 95       	ret

	// Check keys in col 2
	PORTC = 0xDF; // Enable col 5 with 0, disable others with 1’s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('2'); }
 192:	82 e3       	ldi	r24, 0x32	; 50
 194:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('5'); }
 196:	85 e3       	ldi	r24, 0x35	; 53
 198:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('8'); }
 19a:	88 e3       	ldi	r24, 0x38	; 56
 19c:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('0'); }
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	08 95       	ret

	// Check keys in col 3
	PORTC = 0xBF; // Enable col 6 with 0, disable others with 1’s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('3'); }
 1a2:	83 e3       	ldi	r24, 0x33	; 51
 1a4:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('6'); }
 1a6:	86 e3       	ldi	r24, 0x36	; 54
 1a8:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('9'); }
 1aa:	89 e3       	ldi	r24, 0x39	; 57
 1ac:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('#'); }
 1ae:	83 e2       	ldi	r24, 0x23	; 35
 1b0:	08 95       	ret

	// Check keys in col 4	
	PORTC = 0x7F; // Enable col 6 with 0, disable others with 1’s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('A'); }
 1b2:	81 e4       	ldi	r24, 0x41	; 65
 1b4:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('B'); }
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('C'); }
 1ba:	83 e4       	ldi	r24, 0x43	; 67
 1bc:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('D'); }
 1be:	84 e4       	ldi	r24, 0x44	; 68

	return('\0'); // default value
}
 1c0:	08 95       	ret

000001c2 <Tick>:

enum SM_STATES {INIT, WAIT, LED_DISPLAY}state;
	
void Tick()
{
	unsigned char x = GetKeypadKey();
 1c2:	b1 df       	rcall	.-158    	; 0x126 <GetKeypadKey>
	switch(state){
 1c4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1c8:	91 30       	cpi	r25, 0x01	; 1
 1ca:	41 f0       	breq	.+16     	; 0x1dc <Tick+0x1a>
 1cc:	18 f0       	brcs	.+6      	; 0x1d4 <Tick+0x12>
 1ce:	92 30       	cpi	r25, 0x02	; 2
 1d0:	61 f0       	breq	.+24     	; 0x1ea <Tick+0x28>
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <Tick+0x30>
		case INIT:
			state = WAIT;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 1da:	08 95       	ret
		case WAIT:
			if (x != '\0')
 1dc:	88 23       	and	r24, r24
 1de:	59 f0       	breq	.+22     	; 0x1f6 <Tick+0x34>
			{
				state = LED_DISPLAY;
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		case INIT:
			break;
		case WAIT:
			break;
		case LED_DISPLAY:
			LCD_WriteData(x);
 1e6:	96 cf       	rjmp	.-212    	; 0x114 <LCD_WriteData>
			//PORTB = x;
			break;
 1e8:	08 95       	ret
			{
				state = WAIT;
			}
			break;
		case LED_DISPLAY:
			state = WAIT;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 1f0:	08 95       	ret
		default:
			state = INIT;
 1f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1f6:	08 95       	ret

000001f8 <main>:
}

int main(void)
{
	unsigned char count = 0x05;
	DDRA = 0xFF; PORTA = 0x00;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	81 b9       	out	0x01, r24	; 1
 1fc:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 1fe:	84 b9       	out	0x04, r24	; 4
 200:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00; // PORTB set to output, outputs init 0s
 202:	8a b9       	out	0x0a, r24	; 10
 204:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 206:	80 ef       	ldi	r24, 0xF0	; 240
 208:	87 b9       	out	0x07, r24	; 7
 20a:	8f e0       	ldi	r24, 0x0F	; 15
 20c:	88 b9       	out	0x08, r24	; 8
	//unsigned char a[] = "Hello"; //initialize a char array with string literal. Special case, OK
	LCD_init();
 20e:	73 df       	rcall	.-282    	; 0xf6 <LCD_init>
	//LCD_DisplayString(1, a);
	//LCD_WriteData('9');
	while(1) {
		Tick();
 210:	d8 df       	rcall	.-80     	; 0x1c2 <Tick>
		LCD_Cursor(1);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	68 df       	rcall	.-304    	; 0xe6 <LCD_Cursor>
 216:	fc cf       	rjmp	.-8      	; 0x210 <main+0x18>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
