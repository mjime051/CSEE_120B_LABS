
finalCustom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000d0c  00000da0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000244  00800142  00800142  00000de2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169a  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adf  00000000  00000000  000025b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8b  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072e  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ecd  00000000  00000000  000045fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000054cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
   2:	00 00       	nop
   4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
   6:	00 00       	nop
   8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c1       	rjmp	.+636    	; 0x2a6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c1 c2       	rjmp	.+1410   	; 0x5b8 <__vector_13>
  36:	00 00       	nop
  38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
  72:	00 00       	nop
  74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
  76:	00 00       	nop
  78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
  82:	00 00       	nop
  84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
  86:	00 00       	nop
  88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
	...

0000008c <CHARSET>:
  8c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  9c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  ac:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  bc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  cc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  dc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  ec:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  fc:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 10c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 11c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 12c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 13c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 14c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 15c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 16c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 17c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 18c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 19c:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1ac:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1bc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1cc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1dc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1ec:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1fc:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 20c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 21c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 22c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 23c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 24c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 25c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000026c <__ctors_end>:
 26c:	11 24       	eor	r1, r1
 26e:	1f be       	out	0x3f, r1	; 63
 270:	cf ef       	ldi	r28, 0xFF	; 255
 272:	d0 e4       	ldi	r29, 0x40	; 64
 274:	de bf       	out	0x3e, r29	; 62
 276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
 278:	11 e0       	ldi	r17, 0x01	; 1
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	ec e0       	ldi	r30, 0x0C	; 12
 280:	fd e0       	ldi	r31, 0x0D	; 13
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	0b bf       	out	0x3b, r16	; 59
 286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
 288:	07 90       	elpm	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	a2 34       	cpi	r26, 0x42	; 66
 28e:	b1 07       	cpc	r27, r17
 290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
 292:	23 e0       	ldi	r18, 0x03	; 3
 294:	a2 e4       	ldi	r26, 0x42	; 66
 296:	b1 e0       	ldi	r27, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
 29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
 29c:	a6 38       	cpi	r26, 0x86	; 134
 29e:	b2 07       	cpc	r27, r18
 2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
 2a2:	29 d4       	rcall	.+2130   	; 0xaf6 <main>
 2a4:	31 c5       	rjmp	.+2658   	; 0xd08 <_exit>

000002a6 <__bad_interrupt>:
 2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <write>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 2a8:	28 98       	cbi	0x05, 0	; 5
 2aa:	66 23       	and	r22, r22
 2ac:	11 f0       	breq	.+4      	; 0x2b2 <write+0xa>
 2ae:	2a 9a       	sbi	0x05, 2	; 5
 2b0:	15 c0       	rjmp	.+42     	; 0x2dc <write+0x34>
 2b2:	2a 98       	cbi	0x05, 2	; 5
 2b4:	13 c0       	rjmp	.+38     	; 0x2dc <write+0x34>
 2b6:	ac 01       	movw	r20, r24
 2b8:	02 2e       	mov	r0, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <write+0x18>
 2bc:	55 95       	asr	r21
 2be:	47 95       	ror	r20
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <write+0x14>
 2c4:	40 ff       	sbrs	r20, 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <write+0x24>
 2c8:	2b 9a       	sbi	0x05, 3	; 5
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <write+0x26>
 2cc:	2b 98       	cbi	0x05, 3	; 5
 2ce:	2c 9a       	sbi	0x05, 4	; 5
 2d0:	2c 98       	cbi	0x05, 4	; 5
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	31 09       	sbc	r19, r1
 2d6:	78 f7       	brcc	.-34     	; 0x2b6 <write+0xe>
 2d8:	28 9a       	sbi	0x05, 0	; 5
 2da:	08 95       	ret
 2dc:	27 e0       	ldi	r18, 0x07	; 7
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	e9 cf       	rjmp	.-46     	; 0x2b6 <write+0xe>

000002e4 <write_cmd>:
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	e0 cf       	rjmp	.-64     	; 0x2a8 <write>
 2e8:	08 95       	ret

000002ea <nokia_lcd_init>:
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	20 9a       	sbi	0x04, 0	; 4
 2f0:	21 9a       	sbi	0x04, 1	; 4
 2f2:	22 9a       	sbi	0x04, 2	; 4
 2f4:	23 9a       	sbi	0x04, 3	; 4
 2f6:	24 9a       	sbi	0x04, 4	; 4
 2f8:	29 9a       	sbi	0x05, 1	; 5
 2fa:	28 9a       	sbi	0x05, 0	; 5
 2fc:	83 ec       	ldi	r24, 0xC3	; 195
 2fe:	99 e0       	ldi	r25, 0x09	; 9
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <nokia_lcd_init+0x16>
 304:	00 c0       	rjmp	.+0      	; 0x306 <nokia_lcd_init+0x1c>
 306:	00 00       	nop
 308:	29 98       	cbi	0x05, 1	; 5
 30a:	8b e5       	ldi	r24, 0x5B	; 91
 30c:	94 e4       	ldi	r25, 0x44	; 68
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <nokia_lcd_init+0x24>
 312:	00 c0       	rjmp	.+0      	; 0x314 <nokia_lcd_init+0x2a>
 314:	00 00       	nop
 316:	29 9a       	sbi	0x05, 1	; 5
 318:	28 98       	cbi	0x05, 0	; 5
 31a:	81 e2       	ldi	r24, 0x21	; 33
 31c:	e3 df       	rcall	.-58     	; 0x2e4 <write_cmd>
 31e:	83 e1       	ldi	r24, 0x13	; 19
 320:	e1 df       	rcall	.-62     	; 0x2e4 <write_cmd>
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	df df       	rcall	.-66     	; 0x2e4 <write_cmd>
 326:	82 ec       	ldi	r24, 0xC2	; 194
 328:	dd df       	rcall	.-70     	; 0x2e4 <write_cmd>
 32a:	80 e2       	ldi	r24, 0x20	; 32
 32c:	db df       	rcall	.-74     	; 0x2e4 <write_cmd>
 32e:	89 e0       	ldi	r24, 0x09	; 9
 330:	d9 df       	rcall	.-78     	; 0x2e4 <write_cmd>
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	d7 df       	rcall	.-82     	; 0x2e4 <write_cmd>
 336:	80 e4       	ldi	r24, 0x40	; 64
 338:	d5 df       	rcall	.-86     	; 0x2e4 <write_cmd>
 33a:	c8 ef       	ldi	r28, 0xF8	; 248
 33c:	d1 e0       	ldi	r29, 0x01	; 1
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	b2 df       	rcall	.-156    	; 0x2a8 <write>
 344:	21 97       	sbiw	r28, 0x01	; 1
 346:	d9 f7       	brne	.-10     	; 0x33e <nokia_lcd_init+0x54>
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	cc df       	rcall	.-104    	; 0x2e4 <write_cmd>
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	ca df       	rcall	.-108    	; 0x2e4 <write_cmd>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <nokia_lcd_clear>:
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	c5 df       	rcall	.-118    	; 0x2e4 <write_cmd>
 35a:	80 e4       	ldi	r24, 0x40	; 64
 35c:	c3 df       	rcall	.-122    	; 0x2e4 <write_cmd>
 35e:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <nokia_lcd+0x1f8>
 362:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <nokia_lcd+0x1f9>
 366:	ea e4       	ldi	r30, 0x4A	; 74
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	82 e4       	ldi	r24, 0x42	; 66
 36c:	93 e0       	ldi	r25, 0x03	; 3
 36e:	11 92       	st	Z+, r1
 370:	e8 17       	cp	r30, r24
 372:	f9 07       	cpc	r31, r25
 374:	e1 f7       	brne	.-8      	; 0x36e <nokia_lcd_clear+0x18>
 376:	08 95       	ret

00000378 <nokia_lcd_set_pixel>:
 378:	26 2f       	mov	r18, r22
 37a:	26 95       	lsr	r18
 37c:	26 95       	lsr	r18
 37e:	26 95       	lsr	r18
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	34 e5       	ldi	r19, 0x54	; 84
 384:	23 9f       	mul	r18, r19
 386:	80 0d       	add	r24, r0
 388:	91 1d       	adc	r25, r1
 38a:	11 24       	eor	r1, r1
 38c:	44 23       	and	r20, r20
 38e:	79 f0       	breq	.+30     	; 0x3ae <nokia_lcd_set_pixel+0x36>
 390:	fc 01       	movw	r30, r24
 392:	e6 5b       	subi	r30, 0xB6	; 182
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	67 70       	andi	r22, 0x07	; 7
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <nokia_lcd_set_pixel+0x2a>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <nokia_lcd_set_pixel+0x26>
 3a6:	90 81       	ld	r25, Z
 3a8:	89 2b       	or	r24, r25
 3aa:	80 83       	st	Z, r24
 3ac:	08 95       	ret
 3ae:	fc 01       	movw	r30, r24
 3b0:	e6 5b       	subi	r30, 0xB6	; 182
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	67 70       	andi	r22, 0x07	; 7
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <nokia_lcd_set_pixel+0x48>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <nokia_lcd_set_pixel+0x44>
 3c4:	80 95       	com	r24
 3c6:	90 81       	ld	r25, Z
 3c8:	89 23       	and	r24, r25
 3ca:	80 83       	st	Z, r24
 3cc:	08 95       	ret

000003ce <nokia_lcd_write_char>:
 3ce:	5f 92       	push	r5
 3d0:	6f 92       	push	r6
 3d2:	7f 92       	push	r7
 3d4:	8f 92       	push	r8
 3d6:	9f 92       	push	r9
 3d8:	af 92       	push	r10
 3da:	bf 92       	push	r11
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	56 2e       	mov	r5, r22
 3ee:	26 2f       	mov	r18, r22
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	49 01       	movw	r8, r18
 3f4:	88 0c       	add	r8, r8
 3f6:	99 1c       	adc	r9, r9
 3f8:	88 0c       	add	r8, r8
 3fa:	99 1c       	adc	r9, r9
 3fc:	82 0e       	add	r8, r18
 3fe:	93 1e       	adc	r9, r19
 400:	18 14       	cp	r1, r8
 402:	19 04       	cpc	r1, r9
 404:	0c f0       	brlt	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	59 c0       	rjmp	.+178    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 408:	89 01       	movw	r16, r18
 40a:	00 0f       	add	r16, r16
 40c:	11 1f       	adc	r17, r17
 40e:	00 0f       	add	r16, r16
 410:	11 1f       	adc	r17, r17
 412:	00 0f       	add	r16, r16
 414:	11 1f       	adc	r17, r17
 416:	02 1b       	sub	r16, r18
 418:	13 0b       	sbc	r17, r19
 41a:	61 2c       	mov	r6, r1
 41c:	a8 2e       	mov	r10, r24
 41e:	b1 2c       	mov	r11, r1
 420:	c5 01       	movw	r24, r10
 422:	80 97       	sbiw	r24, 0x20	; 32
 424:	5c 01       	movw	r10, r24
 426:	aa 0c       	add	r10, r10
 428:	bb 1c       	adc	r11, r11
 42a:	aa 0c       	add	r10, r10
 42c:	bb 1c       	adc	r11, r11
 42e:	a8 0e       	add	r10, r24
 430:	b9 1e       	adc	r11, r25
 432:	0f 2e       	mov	r0, r31
 434:	f3 e4       	ldi	r31, 0x43	; 67
 436:	cf 2e       	mov	r12, r31
 438:	f3 e0       	ldi	r31, 0x03	; 3
 43a:	df 2e       	mov	r13, r31
 43c:	f0 2d       	mov	r31, r0
 43e:	0f 2e       	mov	r0, r31
 440:	f2 e4       	ldi	r31, 0x42	; 66
 442:	ef 2e       	mov	r14, r31
 444:	f3 e0       	ldi	r31, 0x03	; 3
 446:	ff 2e       	mov	r15, r31
 448:	f0 2d       	mov	r31, r0
 44a:	2a c0       	rjmp	.+84     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 44c:	fe 01       	movw	r30, r28
 44e:	24 91       	lpm	r18, Z
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	87 2d       	mov	r24, r7
 454:	65 2d       	mov	r22, r5
 456:	73 d3       	rcall	.+1766   	; 0xb3e <__udivmodqi4>
 458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45a:	35 95       	asr	r19
 45c:	27 95       	ror	r18
 45e:	8a 95       	dec	r24
 460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	20 ff       	sbrs	r18, 0
 464:	09 c0       	rjmp	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 466:	f6 01       	movw	r30, r12
 468:	60 81       	ld	r22, Z
 46a:	67 0d       	add	r22, r7
 46c:	f7 01       	movw	r30, r14
 46e:	80 81       	ld	r24, Z
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	86 0d       	add	r24, r6
 474:	81 df       	rcall	.-254    	; 0x378 <nokia_lcd_set_pixel>
 476:	08 c0       	rjmp	.+16     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 478:	f6 01       	movw	r30, r12
 47a:	60 81       	ld	r22, Z
 47c:	67 0d       	add	r22, r7
 47e:	f7 01       	movw	r30, r14
 480:	80 81       	ld	r24, Z
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	86 0d       	add	r24, r6
 486:	78 df       	rcall	.-272    	; 0x378 <nokia_lcd_set_pixel>
 488:	73 94       	inc	r7
 48a:	87 2d       	mov	r24, r7
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	80 17       	cp	r24, r16
 490:	91 07       	cpc	r25, r17
 492:	e4 f2       	brlt	.-72     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 494:	63 94       	inc	r6
 496:	86 2d       	mov	r24, r6
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	88 15       	cp	r24, r8
 49c:	99 05       	cpc	r25, r9
 49e:	6c f4       	brge	.+26     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4a0:	10 16       	cp	r1, r16
 4a2:	11 06       	cpc	r1, r17
 4a4:	bc f7       	brge	.-18     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 4a6:	86 2d       	mov	r24, r6
 4a8:	65 2d       	mov	r22, r5
 4aa:	49 d3       	rcall	.+1682   	; 0xb3e <__udivmodqi4>
 4ac:	e5 01       	movw	r28, r10
 4ae:	c8 0f       	add	r28, r24
 4b0:	d1 1d       	adc	r29, r1
 4b2:	c4 57       	subi	r28, 0x74	; 116
 4b4:	df 4f       	sbci	r29, 0xFF	; 255
 4b6:	71 2c       	mov	r7, r1
 4b8:	c9 cf       	rjmp	.-110    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 4ba:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <nokia_lcd+0x1f8>
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	98 0f       	add	r25, r24
 4c2:	85 2d       	mov	r24, r5
 4c4:	88 0f       	add	r24, r24
 4c6:	88 0f       	add	r24, r24
 4c8:	85 0d       	add	r24, r5
 4ca:	89 0f       	add	r24, r25
 4cc:	84 35       	cpi	r24, 0x54	; 84
 4ce:	18 f4       	brcc	.+6      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <nokia_lcd+0x1f8>
 4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4d6:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <nokia_lcd+0x1f8>
 4da:	e3 e4       	ldi	r30, 0x43	; 67
 4dc:	f3 e0       	ldi	r31, 0x03	; 3
 4de:	80 81       	ld	r24, Z
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	98 0f       	add	r25, r24
 4e4:	85 2d       	mov	r24, r5
 4e6:	88 0f       	add	r24, r24
 4e8:	88 0f       	add	r24, r24
 4ea:	88 0f       	add	r24, r24
 4ec:	85 19       	sub	r24, r5
 4ee:	89 0f       	add	r24, r25
 4f0:	80 83       	st	Z, r24
 4f2:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <nokia_lcd+0x1f9>
 4f6:	80 33       	cpi	r24, 0x30	; 48
 4f8:	20 f0       	brcs	.+8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4fa:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <nokia_lcd+0x1f8>
 4fe:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <nokia_lcd+0x1f9>
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	bf 90       	pop	r11
 514:	af 90       	pop	r10
 516:	9f 90       	pop	r9
 518:	8f 90       	pop	r8
 51a:	7f 90       	pop	r7
 51c:	6f 90       	pop	r6
 51e:	5f 90       	pop	r5
 520:	08 95       	ret

00000522 <nokia_lcd_write_string>:
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	ec 01       	movw	r28, r24
 52a:	88 81       	ld	r24, Y
 52c:	88 23       	and	r24, r24
 52e:	39 f0       	breq	.+14     	; 0x53e <nokia_lcd_write_string+0x1c>
 530:	16 2f       	mov	r17, r22
 532:	21 96       	adiw	r28, 0x01	; 1
 534:	61 2f       	mov	r22, r17
 536:	4b df       	rcall	.-362    	; 0x3ce <nokia_lcd_write_char>
 538:	89 91       	ld	r24, Y+
 53a:	81 11       	cpse	r24, r1
 53c:	fb cf       	rjmp	.-10     	; 0x534 <nokia_lcd_write_string+0x12>
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	08 95       	ret

00000546 <nokia_lcd_render>:
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	80 e8       	ldi	r24, 0x80	; 128
 550:	c9 de       	rcall	.-622    	; 0x2e4 <write_cmd>
 552:	80 e4       	ldi	r24, 0x40	; 64
 554:	c7 de       	rcall	.-626    	; 0x2e4 <write_cmd>
 556:	ca e4       	ldi	r28, 0x4A	; 74
 558:	d1 e0       	ldi	r29, 0x01	; 1
 55a:	02 e4       	ldi	r16, 0x42	; 66
 55c:	13 e0       	ldi	r17, 0x03	; 3
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	89 91       	ld	r24, Y+
 562:	a2 de       	rcall	.-700    	; 0x2a8 <write>
 564:	c0 17       	cp	r28, r16
 566:	d1 07       	cpc	r29, r17
 568:	d1 f7       	brne	.-12     	; 0x55e <nokia_lcd_render+0x18>
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	08 95       	ret

00000574 <SNES_init>:
 574:	10 9a       	sbi	0x02, 0	; 2
 576:	11 9a       	sbi	0x02, 1	; 2
 578:	08 95       	ret

0000057a <SNES_Read>:
 57a:	11 9a       	sbi	0x02, 1	; 2
 57c:	10 9a       	sbi	0x02, 0	; 2
 57e:	11 98       	cbi	0x02, 1	; 2
 580:	20 b1       	in	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	20 95       	com	r18
 586:	30 95       	com	r19
 588:	22 fb       	bst	r18, 2
 58a:	88 27       	eor	r24, r24
 58c:	80 f9       	bld	r24, 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	40 e1       	ldi	r20, 0x10	; 16
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	10 98       	cbi	0x02, 0	; 2
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	20 b1       	in	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	20 95       	com	r18
 5a0:	30 95       	com	r19
 5a2:	22 fb       	bst	r18, 2
 5a4:	66 27       	eor	r22, r22
 5a6:	60 f9       	bld	r22, 0
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	86 2b       	or	r24, r22
 5ac:	97 2b       	or	r25, r23
 5ae:	10 9a       	sbi	0x02, 0	; 2
 5b0:	41 50       	subi	r20, 0x01	; 1
 5b2:	51 09       	sbc	r21, r1
 5b4:	79 f7       	brne	.-34     	; 0x594 <SNES_Read+0x1a>
 5b6:	08 95       	ret

000005b8 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	af 93       	push	r26
 5c8:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 5ca:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_avr_timer_cntcurr>
 5ce:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <_avr_timer_cntcurr+0x1>
 5d2:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <_avr_timer_cntcurr+0x2>
 5d6:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <_avr_timer_cntcurr+0x3>
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	a1 09       	sbc	r26, r1
 5de:	b1 09       	sbc	r27, r1
 5e0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_avr_timer_cntcurr>
 5e4:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <_avr_timer_cntcurr+0x1>
 5e8:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <_avr_timer_cntcurr+0x2>
 5ec:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 5f0:	89 2b       	or	r24, r25
 5f2:	8a 2b       	or	r24, r26
 5f4:	8b 2b       	or	r24, r27
 5f6:	99 f4       	brne	.+38     	; 0x61e <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 5fe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 602:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 606:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 60a:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 60e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_avr_timer_cntcurr>
 612:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <_avr_timer_cntcurr+0x1>
 616:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <_avr_timer_cntcurr+0x2>
 61a:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <_avr_timer_cntcurr+0x3>
	}
}
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <TickFct_PLayer>:

player player1;
unsigned short input = 0x0000;
unsigned char gameFlag = 1;
enum PLAYER_STATES {PLAYER_INIT, PLAYER_MOVE} PLAYER_STATE;
int TickFct_PLayer(int PLAYER_STATE){
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
	int next_state;
	switch(PLAYER_STATE){
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	89 f0       	breq	.+34     	; 0x65a <TickFct_PLayer+0x2a>
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	91 05       	cpc	r25, r1
 63c:	41 f4       	brne	.+16     	; 0x64e <TickFct_PLayer+0x1e>
		case PLAYER_INIT:
		if (gameFlag == 1)
		{
			next_state = PLAYER_MOVE;
 63e:	d1 e0       	ldi	r29, 0x01	; 1
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameFlag>
 646:	81 11       	cpse	r24, r1
 648:	1a c0       	rjmp	.+52     	; 0x67e <TickFct_PLayer+0x4e>
 64a:	d0 e0       	ldi	r29, 0x00	; 0
 64c:	18 c0       	rjmp	.+48     	; 0x67e <TickFct_PLayer+0x4e>
			break;
		default:
			next_state = PLAYER_INIT;
			break;
	}
	switch(PLAYER_STATE){
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	39 f0       	breq	.+14     	; 0x660 <TickFct_PLayer+0x30>
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	09 f0       	breq	.+2      	; 0x658 <TickFct_PLayer+0x28>
 656:	5e c0       	rjmp	.+188    	; 0x714 <TickFct_PLayer+0xe4>
 658:	10 c0       	rjmp	.+32     	; 0x67a <TickFct_PLayer+0x4a>
unsigned short input = 0x0000;
unsigned char gameFlag = 1;
enum PLAYER_STATES {PLAYER_INIT, PLAYER_MOVE} PLAYER_STATE;
int TickFct_PLayer(int PLAYER_STATE){
	int next_state;
	switch(PLAYER_STATE){
 65a:	d1 e0       	ldi	r29, 0x01	; 1
 65c:	c0 e0       	ldi	r28, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <TickFct_PLayer+0x34>
			{
				next_state = PLAYER_INIT;
			}
			break;
		default:
			next_state = PLAYER_INIT;
 660:	d0 e0       	ldi	r29, 0x00	; 0
 662:	c0 e0       	ldi	r28, 0x00	; 0
			break;
	}
	switch(PLAYER_STATE){
		case PLAYER_INIT:
			if (gameFlag == 1)
 664:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameFlag>
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	09 f0       	breq	.+2      	; 0x66e <TickFct_PLayer+0x3e>
 66c:	55 c0       	rjmp	.+170    	; 0x718 <TickFct_PLayer+0xe8>
			{
				player1.x = 42;
 66e:	e1 e8       	ldi	r30, 0x81	; 129
 670:	f3 e0       	ldi	r31, 0x03	; 3
 672:	8a e2       	ldi	r24, 0x2A	; 42
 674:	80 83       	st	Z, r24
				player1.y = 42;
 676:	81 83       	std	Z+1, r24	; 0x01
 678:	4f c0       	rjmp	.+158    	; 0x718 <TickFct_PLayer+0xe8>
			{
				next_state = PLAYER_INIT;
			}
			break;
		default:
			next_state = PLAYER_INIT;
 67a:	d0 e0       	ldi	r29, 0x00	; 0
 67c:	c0 e0       	ldi	r28, 0x00	; 0
				player1.x = 42;
				player1.y = 42;
			}
			break;
		case PLAYER_MOVE:
		if (gameFlag == 1)
 67e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameFlag>
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	09 f0       	breq	.+2      	; 0x688 <TickFct_PLayer+0x58>
 686:	48 c0       	rjmp	.+144    	; 0x718 <TickFct_PLayer+0xe8>
		{
			input = SNES_Read();
 688:	78 df       	rcall	.-272    	; 0x57a <SNES_Read>
 68a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <input+0x1>
 68e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <input>
			nokia_lcd_set_cursor(player1.x,player1.y);
 692:	e1 e8       	ldi	r30, 0x81	; 129
 694:	f3 e0       	ldi	r31, 0x03	; 3
 696:	81 81       	ldd	r24, Z+1	; 0x01
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 698:	90 81       	ld	r25, Z
 69a:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
 69e:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <nokia_lcd+0x1f9>
			nokia_lcd_write_char(' ',1);
 6a2:	61 e0       	ldi	r22, 0x01	; 1
 6a4:	80 e2       	ldi	r24, 0x20	; 32
 6a6:	93 de       	rcall	.-730    	; 0x3ce <nokia_lcd_write_char>
			if (input == SNES_A )//SNES_A, move right
 6a8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <input>
 6ac:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <input+0x1>
 6b0:	80 38       	cpi	r24, 0x80	; 128
 6b2:	91 05       	cpc	r25, r1
 6b4:	31 f4       	brne	.+12     	; 0x6c2 <TickFct_PLayer+0x92>
			{
				player1.x = player1.x + 4;
 6b6:	e1 e8       	ldi	r30, 0x81	; 129
 6b8:	f3 e0       	ldi	r31, 0x03	; 3
 6ba:	80 81       	ld	r24, Z
 6bc:	8c 5f       	subi	r24, 0xFC	; 252
 6be:	80 83       	st	Z, r24
 6c0:	1c c0       	rjmp	.+56     	; 0x6fa <TickFct_PLayer+0xca>
			}
			else if (input == SNES_Y)//SNES_Y, move left
 6c2:	81 15       	cp	r24, r1
 6c4:	20 e4       	ldi	r18, 0x40	; 64
 6c6:	92 07       	cpc	r25, r18
 6c8:	31 f4       	brne	.+12     	; 0x6d6 <TickFct_PLayer+0xa6>
			{
				player1.x -= 4;
 6ca:	e1 e8       	ldi	r30, 0x81	; 129
 6cc:	f3 e0       	ldi	r31, 0x03	; 3
 6ce:	80 81       	ld	r24, Z
 6d0:	84 50       	subi	r24, 0x04	; 4
 6d2:	80 83       	st	Z, r24
 6d4:	12 c0       	rjmp	.+36     	; 0x6fa <TickFct_PLayer+0xca>
			}
			else if (input == SNES_B)//SNES_B, move down
 6d6:	81 15       	cp	r24, r1
 6d8:	20 e8       	ldi	r18, 0x80	; 128
 6da:	92 07       	cpc	r25, r18
 6dc:	31 f4       	brne	.+12     	; 0x6ea <TickFct_PLayer+0xba>
			{
				player1.y += 4;
 6de:	e1 e8       	ldi	r30, 0x81	; 129
 6e0:	f3 e0       	ldi	r31, 0x03	; 3
 6e2:	81 81       	ldd	r24, Z+1	; 0x01
 6e4:	8c 5f       	subi	r24, 0xFC	; 252
 6e6:	81 83       	std	Z+1, r24	; 0x01
 6e8:	08 c0       	rjmp	.+16     	; 0x6fa <TickFct_PLayer+0xca>
			}
			else if (input == SNES_X)//SNES_X, move up
 6ea:	80 34       	cpi	r24, 0x40	; 64
 6ec:	91 05       	cpc	r25, r1
 6ee:	29 f4       	brne	.+10     	; 0x6fa <TickFct_PLayer+0xca>
			{
				player1.y -= 4;
 6f0:	e1 e8       	ldi	r30, 0x81	; 129
 6f2:	f3 e0       	ldi	r31, 0x03	; 3
 6f4:	81 81       	ldd	r24, Z+1	; 0x01
 6f6:	84 50       	subi	r24, 0x04	; 4
 6f8:	81 83       	std	Z+1, r24	; 0x01

			}
			nokia_lcd_set_cursor(player1.x,player1.y);
 6fa:	e1 e8       	ldi	r30, 0x81	; 129
 6fc:	f3 e0       	ldi	r31, 0x03	; 3
 6fe:	81 81       	ldd	r24, Z+1	; 0x01
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 700:	90 81       	ld	r25, Z
 702:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
 706:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <nokia_lcd+0x1f9>
			nokia_lcd_write_char('*',1);
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	8a e2       	ldi	r24, 0x2A	; 42
			nokia_lcd_render();
 70e:	5f de       	rcall	.-834    	; 0x3ce <nokia_lcd_write_char>
 710:	1a df       	rcall	.-460    	; 0x546 <nokia_lcd_render>
 712:	02 c0       	rjmp	.+4      	; 0x718 <TickFct_PLayer+0xe8>
			{
				next_state = PLAYER_INIT;
			}
			break;
		default:
			next_state = PLAYER_INIT;
 714:	d0 e0       	ldi	r29, 0x00	; 0
 716:	c0 e0       	ldi	r28, 0x00	; 0
		default:
			break;
	}
	PLAYER_STATE = next_state;
	return PLAYER_STATE;
};
 718:	8d 2f       	mov	r24, r29
 71a:	9c 2f       	mov	r25, r28
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	08 95       	ret

00000722 <TickFct_Enemy>:

enum ENEMY_STATES {ENEMY_INIT, ENEMY_MOVE}ENEMY_STATE;
enemy arr[30];
int TickFct_Enemy(int ENEMY_STATE){
 722:	6f 92       	push	r6
 724:	7f 92       	push	r7
 726:	8f 92       	push	r8
 728:	9f 92       	push	r9
 72a:	af 92       	push	r10
 72c:	bf 92       	push	r11
 72e:	cf 92       	push	r12
 730:	df 92       	push	r13
 732:	ef 92       	push	r14
 734:	ff 92       	push	r15
 736:	0f 93       	push	r16
 738:	1f 93       	push	r17
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
	int next_state;
	switch(ENEMY_STATE){
 73e:	00 97       	sbiw	r24, 0x00	; 0
 740:	b1 f0       	breq	.+44     	; 0x76e <TickFct_Enemy+0x4c>
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	91 05       	cpc	r25, r1
 746:	69 f4       	brne	.+26     	; 0x762 <TickFct_Enemy+0x40>
			{
				next_state = ENEMY_MOVE;
			}
			break;
		case ENEMY_MOVE:
		if (gameFlag == 1)
 748:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameFlag>
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	09 f0       	breq	.+2      	; 0x752 <TickFct_Enemy+0x30>
 750:	8f c0       	rjmp	.+286    	; 0x870 <TickFct_Enemy+0x14e>
	int next_state;
	switch(ENEMY_STATE){
		case ENEMY_INIT:
			if (gameFlag == 1)
			{
				next_state = ENEMY_MOVE;
 752:	71 2c       	mov	r7, r1
 754:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <GAME_STATE>
 758:	91 35       	cpi	r25, 0x51	; 81
 75a:	08 f0       	brcs	.+2      	; 0x75e <TickFct_Enemy+0x3c>
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	68 2e       	mov	r6, r24
 760:	44 c0       	rjmp	.+136    	; 0x7ea <TickFct_Enemy+0xc8>
		}
			break;
		default:
			break;
	}
	switch(ENEMY_STATE){
 762:	00 97       	sbiw	r24, 0x00	; 0
 764:	21 f0       	breq	.+8      	; 0x76e <TickFct_Enemy+0x4c>
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	09 f0       	breq	.+2      	; 0x76c <TickFct_Enemy+0x4a>
 76a:	82 c0       	rjmp	.+260    	; 0x870 <TickFct_Enemy+0x14e>
 76c:	39 c0       	rjmp	.+114    	; 0x7e0 <TickFct_Enemy+0xbe>
		case ENEMY_INIT:
		if (gameFlag == 1)
 76e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameFlag>
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	09 f0       	breq	.+2      	; 0x778 <TickFct_Enemy+0x56>
 776:	79 c0       	rjmp	.+242    	; 0x86a <TickFct_Enemy+0x148>
 778:	c4 e4       	ldi	r28, 0x44	; 68
 77a:	d3 e0       	ldi	r29, 0x03	; 3
 77c:	0f 2e       	mov	r0, r31
 77e:	f8 e5       	ldi	r31, 0x58	; 88
 780:	af 2e       	mov	r10, r31
 782:	f3 e0       	ldi	r31, 0x03	; 3
 784:	bf 2e       	mov	r11, r31
 786:	f0 2d       	mov	r31, r0
		{
			for (unsigned char i = 0; i < 10; i++)
			{
				arr[i].x = (rand() % 80);
 788:	0f 2e       	mov	r0, r31
 78a:	f0 e5       	ldi	r31, 0x50	; 80
 78c:	cf 2e       	mov	r12, r31
 78e:	d1 2c       	mov	r13, r1
 790:	f0 2d       	mov	r31, r0
				arr[i].y = (rand() % 30) + 8;
 792:	0f 2e       	mov	r0, r31
 794:	fe e1       	ldi	r31, 0x1E	; 30
 796:	8f 2e       	mov	r8, r31
 798:	91 2c       	mov	r9, r1
 79a:	f0 2d       	mov	r31, r0
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 79c:	0f 2e       	mov	r0, r31
 79e:	f2 e4       	ldi	r31, 0x42	; 66
 7a0:	ef 2e       	mov	r14, r31
 7a2:	f3 e0       	ldi	r31, 0x03	; 3
 7a4:	ff 2e       	mov	r15, r31
 7a6:	f0 2d       	mov	r31, r0
	nokia_lcd.cursor_y = y;
 7a8:	03 e4       	ldi	r16, 0x43	; 67
 7aa:	13 e0       	ldi	r17, 0x03	; 3
		case ENEMY_INIT:
		if (gameFlag == 1)
		{
			for (unsigned char i = 0; i < 10; i++)
			{
				arr[i].x = (rand() % 80);
 7ac:	42 d2       	rcall	.+1156   	; 0xc32 <rand>
 7ae:	b6 01       	movw	r22, r12
 7b0:	d2 d1       	rcall	.+932    	; 0xb56 <__divmodhi4>
 7b2:	88 83       	st	Y, r24
				arr[i].y = (rand() % 30) + 8;
 7b4:	3e d2       	rcall	.+1148   	; 0xc32 <rand>
 7b6:	b4 01       	movw	r22, r8
 7b8:	ce d1       	rcall	.+924    	; 0xb56 <__divmodhi4>
 7ba:	88 5f       	subi	r24, 0xF8	; 248
 7bc:	89 83       	std	Y+1, r24	; 0x01
 7be:	98 81       	ld	r25, Y
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 7c0:	f7 01       	movw	r30, r14
 7c2:	90 83       	st	Z, r25
 7c4:	f8 01       	movw	r30, r16
	nokia_lcd.cursor_y = y;
 7c6:	80 83       	st	Z, r24
				nokia_lcd_set_cursor(arr[i].x,arr[i].y);
				nokia_lcd_write_char('=',1);
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	8d e3       	ldi	r24, 0x3D	; 61
 7cc:	00 de       	rcall	.-1024   	; 0x3ce <nokia_lcd_write_char>
 7ce:	bb de       	rcall	.-650    	; 0x546 <nokia_lcd_render>
				nokia_lcd_render();
 7d0:	22 96       	adiw	r28, 0x02	; 2
 7d2:	ca 15       	cp	r28, r10
 7d4:	db 05       	cpc	r29, r11
	}
	switch(ENEMY_STATE){
		case ENEMY_INIT:
		if (gameFlag == 1)
		{
			for (unsigned char i = 0; i < 10; i++)
 7d6:	51 f7       	brne	.-44     	; 0x7ac <TickFct_Enemy+0x8a>
 7d8:	66 24       	eor	r6, r6
 7da:	63 94       	inc	r6
 7dc:	71 2c       	mov	r7, r1
 7de:	48 c0       	rjmp	.+144    	; 0x870 <TickFct_Enemy+0x14e>
 7e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameFlag>
				nokia_lcd_render();
			}
		}
		break;
		case ENEMY_MOVE:
		if (gameFlag == 1)
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	09 f0       	breq	.+2      	; 0x7ea <TickFct_Enemy+0xc8>
 7e8:	43 c0       	rjmp	.+134    	; 0x870 <TickFct_Enemy+0x14e>
 7ea:	0f 2e       	mov	r0, r31
 7ec:	f4 e4       	ldi	r31, 0x44	; 68
 7ee:	8f 2e       	mov	r8, r31
 7f0:	f3 e0       	ldi	r31, 0x03	; 3
 7f2:	9f 2e       	mov	r9, r31
 7f4:	f0 2d       	mov	r31, r0
 7f6:	0f 2e       	mov	r0, r31
 7f8:	f8 e5       	ldi	r31, 0x58	; 88
 7fa:	cf 2e       	mov	r12, r31
 7fc:	f3 e0       	ldi	r31, 0x03	; 3
 7fe:	df 2e       	mov	r13, r31
 800:	f0 2d       	mov	r31, r0
 802:	0f 2e       	mov	r0, r31
 804:	f2 e4       	ldi	r31, 0x42	; 66
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 806:	ef 2e       	mov	r14, r31
 808:	f3 e0       	ldi	r31, 0x03	; 3
 80a:	ff 2e       	mov	r15, r31
 80c:	f0 2d       	mov	r31, r0
 80e:	03 e4       	ldi	r16, 0x43	; 67
 810:	13 e0       	ldi	r17, 0x03	; 3
	nokia_lcd.cursor_y = y;
 812:	0f 2e       	mov	r0, r31
 814:	fe e1       	ldi	r31, 0x1E	; 30
				{
					arr[j].x = arr[j].x + 4;
				}
				else{
					arr[j].x = 0;
					arr[j].y = (rand() % 30) + 8;
 816:	af 2e       	mov	r10, r31
 818:	b1 2c       	mov	r11, r1
 81a:	f0 2d       	mov	r31, r0
 81c:	e4 01       	movw	r28, r8
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	98 81       	ld	r25, Y
		case ENEMY_MOVE:
		if (gameFlag == 1)
		{
			for (unsigned char j = 0; j < 10; j++)
			{
				nokia_lcd_set_cursor(arr[j].x,arr[j].y);
 822:	f7 01       	movw	r30, r14
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 824:	90 83       	st	Z, r25
 826:	f8 01       	movw	r30, r16
	nokia_lcd.cursor_y = y;
 828:	80 83       	st	Z, r24
 82a:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_write_char(' ',1);
 82c:	80 e2       	ldi	r24, 0x20	; 32
 82e:	cf dd       	rcall	.-1122   	; 0x3ce <nokia_lcd_write_char>
 830:	88 81       	ld	r24, Y
 832:	80 35       	cpi	r24, 0x50	; 80
				if (arr[j].x < 80)
 834:	18 f4       	brcc	.+6      	; 0x83c <TickFct_Enemy+0x11a>
 836:	8c 5f       	subi	r24, 0xFC	; 252
				{
					arr[j].x = arr[j].x + 4;
 838:	88 83       	st	Y, r24
 83a:	06 c0       	rjmp	.+12     	; 0x848 <TickFct_Enemy+0x126>
 83c:	18 82       	st	Y, r1
				}
				else{
					arr[j].x = 0;
 83e:	f9 d1       	rcall	.+1010   	; 0xc32 <rand>
					arr[j].y = (rand() % 30) + 8;
 840:	b5 01       	movw	r22, r10
 842:	89 d1       	rcall	.+786    	; 0xb56 <__divmodhi4>
 844:	88 5f       	subi	r24, 0xF8	; 248
 846:	89 83       	std	Y+1, r24	; 0x01
 848:	89 81       	ldd	r24, Y+1	; 0x01
 84a:	98 81       	ld	r25, Y
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 84c:	f7 01       	movw	r30, r14
 84e:	90 83       	st	Z, r25
 850:	f8 01       	movw	r30, r16
	nokia_lcd.cursor_y = y;
 852:	80 83       	st	Z, r24
 854:	61 e0       	ldi	r22, 0x01	; 1
				}
				nokia_lcd_set_cursor(arr[j].x,arr[j].y);
				nokia_lcd_write_char('=',1);
 856:	8d e3       	ldi	r24, 0x3D	; 61
 858:	ba dd       	rcall	.-1164   	; 0x3ce <nokia_lcd_write_char>
 85a:	75 de       	rcall	.-790    	; 0x546 <nokia_lcd_render>
 85c:	f2 e0       	ldi	r31, 0x02	; 2
				nokia_lcd_render();
 85e:	8f 0e       	add	r8, r31
 860:	91 1c       	adc	r9, r1
 862:	8c 14       	cp	r8, r12
 864:	9d 04       	cpc	r9, r13
 866:	d1 f6       	brne	.-76     	; 0x81c <TickFct_Enemy+0xfa>
		}
		break;
		case ENEMY_MOVE:
		if (gameFlag == 1)
		{
			for (unsigned char j = 0; j < 10; j++)
 868:	03 c0       	rjmp	.+6      	; 0x870 <TickFct_Enemy+0x14e>
 86a:	66 24       	eor	r6, r6
 86c:	63 94       	inc	r6
 86e:	71 2c       	mov	r7, r1
 870:	86 2d       	mov	r24, r6
 872:	97 2d       	mov	r25, r7
 874:	df 91       	pop	r29
		}	
		break;
	}
	ENEMY_STATE = next_state;
	return ENEMY_STATE;
}
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	df 90       	pop	r13
 882:	cf 90       	pop	r12
 884:	bf 90       	pop	r11
 886:	af 90       	pop	r10
 888:	9f 90       	pop	r9
 88a:	8f 90       	pop	r8
 88c:	7f 90       	pop	r7
 88e:	6f 90       	pop	r6
 890:	08 95       	ret

00000892 <TickFct_Hit>:
 892:	cf 92       	push	r12
 894:	df 92       	push	r13
 896:	ef 92       	push	r14

enum HIT_STATES {CHECK, RESET} HIT_STATE;
unsigned char hitFlag = 0x00;
int TickFct_Hit(int HIT_STATE){
 898:	ff 92       	push	r15
 89a:	0f 93       	push	r16
 89c:	1f 93       	push	r17
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	9c 01       	movw	r18, r24
	int next_state;
	switch(HIT_STATE){
 8a4:	89 2b       	or	r24, r25
 8a6:	41 f4       	brne	.+16     	; 0x8b8 <TickFct_Hit+0x26>
			if (gameFlag == 1)
			{
				next_state = CHECK;
			}
			else{
				next_state = RESET;
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <gameFlag>
 8b0:	21 30       	cpi	r18, 0x01	; 1
 8b2:	89 f4       	brne	.+34     	; 0x8d6 <TickFct_Hit+0x44>
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	0f c0       	rjmp	.+30     	; 0x8d6 <TickFct_Hit+0x44>
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <gameFlag>
 8c0:	41 30       	cpi	r20, 0x01	; 1
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <TickFct_Hit+0x34>
 8c4:	80 e0       	ldi	r24, 0x00	; 0
		else{
			next_state = RESET;
		}
			break;
	}
	switch(HIT_STATE){
 8c6:	21 15       	cp	r18, r1
 8c8:	31 05       	cpc	r19, r1
 8ca:	29 f0       	breq	.+10     	; 0x8d6 <TickFct_Hit+0x44>
 8cc:	21 30       	cpi	r18, 0x01	; 1
 8ce:	31 05       	cpc	r19, r1
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <TickFct_Hit+0x42>
 8d2:	40 c0       	rjmp	.+128    	; 0x954 <TickFct_Hit+0xc2>
 8d4:	41 c0       	rjmp	.+130    	; 0x958 <TickFct_Hit+0xc6>
		case CHECK:
			if (gameFlag == 1)
 8d6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <gameFlag>
 8da:	21 30       	cpi	r18, 0x01	; 1
 8dc:	e9 f5       	brne	.+122    	; 0x958 <TickFct_Hit+0xc6>
			{
				for (unsigned char k = 0; k < 10; k++)
				{
					if (arr[k].x < (player1.x + 6) && arr[k].x > player1.x && arr[k].y > player1.y && arr[k].y < (player1.y + 6))
 8de:	e1 e8       	ldi	r30, 0x81	; 129
 8e0:	f3 e0       	ldi	r31, 0x03	; 3
 8e2:	60 81       	ld	r22, Z
 8e4:	c6 2f       	mov	r28, r22
 8e6:	d0 e0       	ldi	r29, 0x00	; 0
 8e8:	26 96       	adiw	r28, 0x06	; 6
 8ea:	71 81       	ldd	r23, Z+1	; 0x01
 8ec:	07 2f       	mov	r16, r23
 8ee:	10 e0       	ldi	r17, 0x00	; 0
 8f0:	0a 5f       	subi	r16, 0xFA	; 250
 8f2:	1f 4f       	sbci	r17, 0xFF	; 255
 8f4:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <__data_end>
 8f8:	e4 e4       	ldi	r30, 0x44	; 68
 8fa:	f3 e0       	ldi	r31, 0x03	; 3
 8fc:	0f 2e       	mov	r0, r31
 8fe:	f8 e5       	ldi	r31, 0x58	; 88
 900:	ef 2e       	mov	r14, r31
 902:	f3 e0       	ldi	r31, 0x03	; 3
 904:	ff 2e       	mov	r15, r31
 906:	f0 2d       	mov	r31, r0
					{
						hitFlag = 1;
					}
					else if (arr[k].y < (player1.y + 6) && arr[k].y > player1.y && arr[k].x == player1.x)
					{
						hitFlag = 1;
 908:	d2 2e       	mov	r13, r18
 90a:	df 01       	movw	r26, r30
		case CHECK:
			if (gameFlag == 1)
			{
				for (unsigned char k = 0; k < 10; k++)
				{
					if (arr[k].x < (player1.x + 6) && arr[k].x > player1.x && arr[k].y > player1.y && arr[k].y < (player1.y + 6))
 90c:	20 81       	ld	r18, Z
 90e:	42 2f       	mov	r20, r18
 910:	50 e0       	ldi	r21, 0x00	; 0
 912:	4c 17       	cp	r20, r28
 914:	5d 07       	cpc	r21, r29
 916:	5c f4       	brge	.+22     	; 0x92e <TickFct_Hit+0x9c>
 918:	62 17       	cp	r22, r18
 91a:	48 f4       	brcc	.+18     	; 0x92e <TickFct_Hit+0x9c>
 91c:	21 81       	ldd	r18, Z+1	; 0x01
 91e:	72 17       	cp	r23, r18
 920:	90 f4       	brcc	.+36     	; 0x946 <TickFct_Hit+0xb4>
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	20 17       	cp	r18, r16
 926:	31 07       	cpc	r19, r17
 928:	74 f4       	brge	.+28     	; 0x946 <TickFct_Hit+0xb4>
					{
						hitFlag = 1;
 92a:	cd 2c       	mov	r12, r13
 92c:	0c c0       	rjmp	.+24     	; 0x946 <TickFct_Hit+0xb4>
					}
					else if (arr[k].y < (player1.y + 6) && arr[k].y > player1.y && arr[k].x == player1.x)
 92e:	11 96       	adiw	r26, 0x01	; 1
 930:	3c 91       	ld	r19, X
 932:	43 2f       	mov	r20, r19
 934:	50 e0       	ldi	r21, 0x00	; 0
 936:	40 17       	cp	r20, r16
 938:	51 07       	cpc	r21, r17
 93a:	2c f4       	brge	.+10     	; 0x946 <TickFct_Hit+0xb4>
 93c:	73 17       	cp	r23, r19
 93e:	18 f4       	brcc	.+6      	; 0x946 <TickFct_Hit+0xb4>
 940:	26 13       	cpse	r18, r22
 942:	01 c0       	rjmp	.+2      	; 0x946 <TickFct_Hit+0xb4>
					{
						hitFlag = 1;
 944:	cd 2c       	mov	r12, r13
 946:	32 96       	adiw	r30, 0x02	; 2
	}
	switch(HIT_STATE){
		case CHECK:
			if (gameFlag == 1)
			{
				for (unsigned char k = 0; k < 10; k++)
 948:	ee 15       	cp	r30, r14
 94a:	ff 05       	cpc	r31, r15
 94c:	f1 f6       	brne	.-68     	; 0x90a <TickFct_Hit+0x78>
 94e:	c0 92 42 01 	sts	0x0142, r12	; 0x800142 <__data_end>
 952:	02 c0       	rjmp	.+4      	; 0x958 <TickFct_Hit+0xc6>
					}
				}
			}
		break;
		case RESET:
			hitFlag = 0;
 954:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
			break;
	}
	HIT_STATE = next_state;
	return HIT_STATE;
}
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	1f 91       	pop	r17
 95e:	0f 91       	pop	r16
 960:	ff 90       	pop	r15
 962:	ef 90       	pop	r14
 964:	df 90       	pop	r13
 966:	cf 90       	pop	r12
 968:	08 95       	ret

0000096a <TickFct_Game>:

enum GAME_STATES {GAME_START, GAME_BUFFER, GAME_PLAY, GAME_OVER} GAME_STATE;
int TickFct_Game(int GAME_STATE){
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ff 92       	push	r15
 970:	0f 93       	push	r16
 972:	1f 93       	push	r17
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	ec 01       	movw	r28, r24
	int next_state;
	switch(GAME_STATE){
 97a:	81 30       	cpi	r24, 0x01	; 1
 97c:	91 05       	cpc	r25, r1
 97e:	c1 f0       	breq	.+48     	; 0x9b0 <TickFct_Game+0x46>
 980:	1c f4       	brge	.+6      	; 0x988 <TickFct_Game+0x1e>
 982:	89 2b       	or	r24, r25
 984:	39 f0       	breq	.+14     	; 0x994 <TickFct_Game+0x2a>
 986:	2c c0       	rjmp	.+88     	; 0x9e0 <TickFct_Game+0x76>
 988:	82 30       	cpi	r24, 0x02	; 2
 98a:	91 05       	cpc	r25, r1
 98c:	b9 f0       	breq	.+46     	; 0x9bc <TickFct_Game+0x52>
 98e:	03 97       	sbiw	r24, 0x03	; 3
 990:	d9 f0       	breq	.+54     	; 0x9c8 <TickFct_Game+0x5e>
 992:	26 c0       	rjmp	.+76     	; 0x9e0 <TickFct_Game+0x76>
		case GAME_START:
			input = SNES_Read();
 994:	f2 dd       	rcall	.-1052   	; 0x57a <SNES_Read>
 996:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <input+0x1>
 99a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <input>
			if (input == SNES_START)
			{
				next_state = GAME_BUFFER;
			}
			else{
				next_state = GAME_START;
 99e:	31 e0       	ldi	r19, 0x01	; 1
 9a0:	20 e0       	ldi	r18, 0x00	; 0
 9a2:	81 15       	cp	r24, r1
 9a4:	90 41       	sbci	r25, 0x10	; 16
 9a6:	09 f0       	breq	.+2      	; 0x9aa <TickFct_Game+0x40>
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	c3 2f       	mov	r28, r19
 9ac:	d2 2f       	mov	r29, r18
 9ae:	28 c0       	rjmp	.+80     	; 0xa00 <TickFct_Game+0x96>
			}
			break;
		case GAME_BUFFER:
			if (gameFlag == 1)
 9b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameFlag>
 9b4:	81 30       	cpi	r24, 0x01	; 1
 9b6:	09 f0       	breq	.+2      	; 0x9ba <TickFct_Game+0x50>
 9b8:	44 c0       	rjmp	.+136    	; 0xa42 <TickFct_Game+0xd8>
 9ba:	8e c0       	rjmp	.+284    	; 0xad8 <TickFct_Game+0x16e>
			{
				next_state = GAME_BUFFER;
			}
			break;
		case GAME_PLAY:
			if (hitFlag == 1)
 9bc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 9c0:	81 30       	cpi	r24, 0x01	; 1
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <TickFct_Game+0x5c>
 9c4:	5b c0       	rjmp	.+182    	; 0xa7c <TickFct_Game+0x112>
			else{
				next_state = GAME_PLAY;
			}
			break;
		case GAME_OVER:
			input = SNES_Read();
 9c6:	8b c0       	rjmp	.+278    	; 0xade <TickFct_Game+0x174>
 9c8:	d8 dd       	rcall	.-1104   	; 0x57a <SNES_Read>
 9ca:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <input+0x1>
 9ce:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <input>
			if(input == SNES_SELECT)
 9d2:	81 15       	cp	r24, r1
 9d4:	90 42       	sbci	r25, 0x20	; 32
 9d6:	09 f0       	breq	.+2      	; 0x9da <TickFct_Game+0x70>
 9d8:	55 c0       	rjmp	.+170    	; 0xa84 <TickFct_Game+0x11a>
			{
				next_state = GAME_START;
 9da:	c0 e0       	ldi	r28, 0x00	; 0
 9dc:	d0 e0       	ldi	r29, 0x00	; 0
 9de:	52 c0       	rjmp	.+164    	; 0xa84 <TickFct_Game+0x11a>
			break;
		default:
			next_state = GAME_START;
			break;
	}
	switch(GAME_STATE){
 9e0:	c1 30       	cpi	r28, 0x01	; 1
 9e2:	d1 05       	cpc	r29, r1
 9e4:	61 f1       	breq	.+88     	; 0xa3e <TickFct_Game+0xd4>
 9e6:	24 f4       	brge	.+8      	; 0x9f0 <TickFct_Game+0x86>
 9e8:	20 97       	sbiw	r28, 0x00	; 0
 9ea:	09 f0       	breq	.+2      	; 0x9ee <TickFct_Game+0x84>
 9ec:	72 c0       	rjmp	.+228    	; 0xad2 <TickFct_Game+0x168>
 9ee:	08 c0       	rjmp	.+16     	; 0xa00 <TickFct_Game+0x96>
 9f0:	c2 30       	cpi	r28, 0x02	; 2
 9f2:	d1 05       	cpc	r29, r1
 9f4:	09 f4       	brne	.+2      	; 0x9f8 <TickFct_Game+0x8e>
 9f6:	40 c0       	rjmp	.+128    	; 0xa78 <TickFct_Game+0x10e>
 9f8:	23 97       	sbiw	r28, 0x03	; 3
 9fa:	09 f0       	breq	.+2      	; 0x9fe <TickFct_Game+0x94>
 9fc:	6a c0       	rjmp	.+212    	; 0xad2 <TickFct_Game+0x168>
 9fe:	40 c0       	rjmp	.+128    	; 0xa80 <TickFct_Game+0x116>
		case GAME_START:
			gameFlag = 1;
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <gameFlag>
			nokia_lcd_clear();
 a06:	a7 dc       	rcall	.-1714   	; 0x356 <nokia_lcd_clear>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 a08:	0f 2e       	mov	r0, r31
 a0a:	f2 e4       	ldi	r31, 0x42	; 66
 a0c:	cf 2e       	mov	r12, r31
 a0e:	f3 e0       	ldi	r31, 0x03	; 3
 a10:	df 2e       	mov	r13, r31
 a12:	f0 2d       	mov	r31, r0
 a14:	f6 01       	movw	r30, r12
 a16:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 a18:	03 e4       	ldi	r16, 0x43	; 67
 a1a:	13 e0       	ldi	r17, 0x03	; 3
 a1c:	f8 01       	movw	r30, r16
 a1e:	10 82       	st	Z, r1
			nokia_lcd_set_cursor(0,0);
			nokia_lcd_write_string("Ready?",1);
 a20:	61 e0       	ldi	r22, 0x01	; 1
 a22:	89 e0       	ldi	r24, 0x09	; 9
 a24:	91 e0       	ldi	r25, 0x01	; 1
 a26:	7d dd       	rcall	.-1286   	; 0x522 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 a28:	f6 01       	movw	r30, r12
 a2a:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 a2c:	8a e0       	ldi	r24, 0x0A	; 10
 a2e:	f8 01       	movw	r30, r16
			nokia_lcd_set_cursor(0,10);
			nokia_lcd_write_string("Press Start!",1);
 a30:	80 83       	st	Z, r24
 a32:	61 e0       	ldi	r22, 0x01	; 1
 a34:	80 e1       	ldi	r24, 0x10	; 16
 a36:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_render();
 a38:	74 dd       	rcall	.-1304   	; 0x522 <nokia_lcd_write_string>
 a3a:	85 dd       	rcall	.-1270   	; 0x546 <nokia_lcd_render>
			break;
 a3c:	53 c0       	rjmp	.+166    	; 0xae4 <TickFct_Game+0x17a>
			else{
				next_state = GAME_OVER;
			}
			break;
		default:
			next_state = GAME_START;
 a3e:	c0 e0       	ldi	r28, 0x00	; 0
 a40:	d0 e0       	ldi	r29, 0x00	; 0
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 a42:	0f 2e       	mov	r0, r31
 a44:	f2 e4       	ldi	r31, 0x42	; 66
 a46:	cf 2e       	mov	r12, r31
 a48:	f3 e0       	ldi	r31, 0x03	; 3
 a4a:	df 2e       	mov	r13, r31
 a4c:	f0 2d       	mov	r31, r0
 a4e:	f6 01       	movw	r30, r12
 a50:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 a52:	03 e4       	ldi	r16, 0x43	; 67
 a54:	13 e0       	ldi	r17, 0x03	; 3
 a56:	f8 01       	movw	r30, r16
			nokia_lcd_render();
			break;
		case GAME_BUFFER:
			nokia_lcd_clear;
			nokia_lcd_set_cursor(0,0);
			nokia_lcd_write_string("      ",1);
 a58:	10 82       	st	Z, r1
 a5a:	61 e0       	ldi	r22, 0x01	; 1
 a5c:	83 e2       	ldi	r24, 0x23	; 35
 a5e:	91 e0       	ldi	r25, 0x01	; 1
 a60:	60 dd       	rcall	.-1344   	; 0x522 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 a62:	f6 01       	movw	r30, r12
	nokia_lcd.cursor_y = y;
 a64:	10 82       	st	Z, r1
 a66:	8a e0       	ldi	r24, 0x0A	; 10
			nokia_lcd_set_cursor(0,10);
			nokia_lcd_write_string("            ",1);
 a68:	f8 01       	movw	r30, r16
 a6a:	80 83       	st	Z, r24
 a6c:	61 e0       	ldi	r22, 0x01	; 1
 a6e:	8d e1       	ldi	r24, 0x1D	; 29
			nokia_lcd_render();
 a70:	91 e0       	ldi	r25, 0x01	; 1
 a72:	57 dd       	rcall	.-1362   	; 0x522 <nokia_lcd_write_string>
			else{
				next_state = GAME_OVER;
			}
			break;
		default:
			next_state = GAME_START;
 a74:	68 dd       	rcall	.-1328   	; 0x546 <nokia_lcd_render>
 a76:	36 c0       	rjmp	.+108    	; 0xae4 <TickFct_Game+0x17a>
			nokia_lcd_set_cursor(0,10);
			nokia_lcd_write_string("            ",1);
			nokia_lcd_render();
			break;
		case GAME_PLAY:
			nokia_lcd_render();
 a78:	c0 e0       	ldi	r28, 0x00	; 0
 a7a:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 a7c:	64 dd       	rcall	.-1336   	; 0x546 <nokia_lcd_render>
			else{
				next_state = GAME_OVER;
			}
			break;
		default:
			next_state = GAME_START;
 a7e:	32 c0       	rjmp	.+100    	; 0xae4 <TickFct_Game+0x17a>
 a80:	c0 e0       	ldi	r28, 0x00	; 0
			break;
		case GAME_PLAY:
			nokia_lcd_render();
			break;
		case GAME_OVER:
			gameFlag = 0;
 a82:	d0 e0       	ldi	r29, 0x00	; 0
 a84:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <gameFlag>
			nokia_lcd_clear();
 a88:	66 dc       	rcall	.-1844   	; 0x356 <nokia_lcd_clear>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 a8a:	0f 2e       	mov	r0, r31
 a8c:	f2 e4       	ldi	r31, 0x42	; 66
 a8e:	cf 2e       	mov	r12, r31
 a90:	f3 e0       	ldi	r31, 0x03	; 3
 a92:	df 2e       	mov	r13, r31
 a94:	f0 2d       	mov	r31, r0
 a96:	f6 01       	movw	r30, r12
	nokia_lcd.cursor_y = y;
 a98:	10 82       	st	Z, r1
 a9a:	03 e4       	ldi	r16, 0x43	; 67
 a9c:	13 e0       	ldi	r17, 0x03	; 3
 a9e:	f8 01       	movw	r30, r16
			nokia_lcd_set_cursor(0,0);
			nokia_lcd_write_string("YOU LOST! Press Select",1);
 aa0:	10 82       	st	Z, r1
 aa2:	61 e0       	ldi	r22, 0x01	; 1
 aa4:	8a e2       	ldi	r24, 0x2A	; 42
 aa6:	91 e0       	ldi	r25, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 aa8:	3c dd       	rcall	.-1416   	; 0x522 <nokia_lcd_write_string>
 aaa:	f6 01       	movw	r30, r12
	nokia_lcd.cursor_y = y;
 aac:	10 82       	st	Z, r1
 aae:	0f 2e       	mov	r0, r31
 ab0:	f4 e1       	ldi	r31, 0x14	; 20
 ab2:	ff 2e       	mov	r15, r31
			nokia_lcd_set_cursor(0,20);
			nokia_lcd_write_char(':',3);
 ab4:	f0 2d       	mov	r31, r0
 ab6:	f8 01       	movw	r30, r16
 ab8:	f0 82       	st	Z, r15
 aba:	63 e0       	ldi	r22, 0x03	; 3
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 abc:	8a e3       	ldi	r24, 0x3A	; 58
 abe:	87 dc       	rcall	.-1778   	; 0x3ce <nokia_lcd_write_char>
	nokia_lcd.cursor_y = y;
 ac0:	f6 01       	movw	r30, r12
 ac2:	f0 82       	st	Z, r15
			nokia_lcd_set_cursor(20,20);
			nokia_lcd_write_char('(',3);
 ac4:	f8 01       	movw	r30, r16
 ac6:	f0 82       	st	Z, r15
 ac8:	63 e0       	ldi	r22, 0x03	; 3
 aca:	88 e2       	ldi	r24, 0x28	; 40
			nokia_lcd_render();
 acc:	80 dc       	rcall	.-1792   	; 0x3ce <nokia_lcd_write_char>
 ace:	3b dd       	rcall	.-1418   	; 0x546 <nokia_lcd_render>
			break;
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <TickFct_Game+0x17a>
			else{
				next_state = GAME_OVER;
			}
			break;
		default:
			next_state = GAME_START;
 ad2:	c0 e0       	ldi	r28, 0x00	; 0
 ad4:	d0 e0       	ldi	r29, 0x00	; 0
			nokia_lcd_write_char('(',3);
			nokia_lcd_render();
			break;
	}
	GAME_STATE = next_state;
	return GAME_STATE;
 ad6:	06 c0       	rjmp	.+12     	; 0xae4 <TickFct_Game+0x17a>
			}
			break;
		case GAME_BUFFER:
			if (gameFlag == 1)
			{
				next_state = GAME_PLAY;
 ad8:	c2 e0       	ldi	r28, 0x02	; 2
 ada:	d0 e0       	ldi	r29, 0x00	; 0
 adc:	b2 cf       	rjmp	.-156    	; 0xa42 <TickFct_Game+0xd8>
			}
			break;
		case GAME_PLAY:
			if (hitFlag == 1)
			{
				next_state = GAME_OVER;
 ade:	c3 e0       	ldi	r28, 0x03	; 3
 ae0:	d0 e0       	ldi	r29, 0x00	; 0
 ae2:	cc cf       	rjmp	.-104    	; 0xa7c <TickFct_Game+0x112>
			nokia_lcd_render();
			break;
	}
	GAME_STATE = next_state;
	return GAME_STATE;
};
 ae4:	ce 01       	movw	r24, r28
 ae6:	df 91       	pop	r29
 ae8:	cf 91       	pop	r28
 aea:	1f 91       	pop	r17
 aec:	0f 91       	pop	r16
 aee:	ff 90       	pop	r15
 af0:	df 90       	pop	r13
 af2:	cf 90       	pop	r12
 af4:	08 95       	ret

00000af6 <main>:

int main(void)
{
	DDRA = 0x03; PORTA = 0x00;
 af6:	83 e0       	ldi	r24, 0x03	; 3
 af8:	81 b9       	out	0x01, r24	; 1
 afa:	12 b8       	out	0x02, r1	; 2
	//player1.x = 42;
	//player1.y = 42;
	nokia_lcd_init();
 afc:	f6 db       	rcall	.-2068   	; 0x2ea <nokia_lcd_init>
	nokia_lcd_clear();
 afe:	2b dc       	rcall	.-1962   	; 0x356 <nokia_lcd_clear>
	SNES_init();
 b00:	39 dd       	rcall	.-1422   	; 0x574 <SNES_init>
 b02:	c1 2c       	mov	r12, r1
	int state = PLAYER_INIT;
	int state2 = ENEMY_INIT;
	int state3 = CHECK;
	int state4 = GAME_START;
 b04:	d1 2c       	mov	r13, r1
 b06:	e1 2c       	mov	r14, r1
	nokia_lcd_init();
	nokia_lcd_clear();
	SNES_init();
	int state = PLAYER_INIT;
	int state2 = ENEMY_INIT;
	int state3 = CHECK;
 b08:	f1 2c       	mov	r15, r1
 b0a:	00 e0       	ldi	r16, 0x00	; 0
	//player1.y = 42;
	nokia_lcd_init();
	nokia_lcd_clear();
	SNES_init();
	int state = PLAYER_INIT;
	int state2 = ENEMY_INIT;
 b0c:	10 e0       	ldi	r17, 0x00	; 0
 b0e:	c0 e0       	ldi	r28, 0x00	; 0
	//player1.x = 42;
	//player1.y = 42;
	nokia_lcd_init();
	nokia_lcd_clear();
	SNES_init();
	int state = PLAYER_INIT;
 b10:	d0 e0       	ldi	r29, 0x00	; 0
		/*nokia_lcd_clear();
		nokia_lcd_set_cursor(player1.x,player1.y);
		nokia_lcd_write_char('F',1);
		nokia_lcd_render();
		*/
		state = TickFct_PLayer(state);
 b12:	ce 01       	movw	r24, r28
 b14:	8d dd       	rcall	.-1254   	; 0x630 <TickFct_PLayer>
 b16:	ec 01       	movw	r28, r24
		state2 = TickFct_Enemy(state2);
 b18:	c8 01       	movw	r24, r16
 b1a:	03 de       	rcall	.-1018   	; 0x722 <TickFct_Enemy>
 b1c:	8c 01       	movw	r16, r24
		state3 = TickFct_Hit(state3);
 b1e:	c7 01       	movw	r24, r14
 b20:	b8 de       	rcall	.-656    	; 0x892 <TickFct_Hit>
 b22:	7c 01       	movw	r14, r24
 b24:	c6 01       	movw	r24, r12
		state4 = TickFct_Game(state4);
 b26:	21 df       	rcall	.-446    	; 0x96a <TickFct_Game>
 b28:	6c 01       	movw	r12, r24
 b2a:	2f e3       	ldi	r18, 0x3F	; 63
 b2c:	8d e0       	ldi	r24, 0x0D	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b2e:	93 e0       	ldi	r25, 0x03	; 3
 b30:	21 50       	subi	r18, 0x01	; 1
 b32:	80 40       	sbci	r24, 0x00	; 0
 b34:	90 40       	sbci	r25, 0x00	; 0
 b36:	e1 f7       	brne	.-8      	; 0xb30 <main+0x3a>
 b38:	00 c0       	rjmp	.+0      	; 0xb3a <main+0x44>
 b3a:	00 00       	nop
 b3c:	ea cf       	rjmp	.-44     	; 0xb12 <main+0x1c>

00000b3e <__udivmodqi4>:
 b3e:	99 1b       	sub	r25, r25
 b40:	79 e0       	ldi	r23, 0x09	; 9
 b42:	04 c0       	rjmp	.+8      	; 0xb4c <__udivmodqi4_ep>

00000b44 <__udivmodqi4_loop>:
 b44:	99 1f       	adc	r25, r25
 b46:	96 17       	cp	r25, r22
 b48:	08 f0       	brcs	.+2      	; 0xb4c <__udivmodqi4_ep>
 b4a:	96 1b       	sub	r25, r22

00000b4c <__udivmodqi4_ep>:
 b4c:	88 1f       	adc	r24, r24
 b4e:	7a 95       	dec	r23
 b50:	c9 f7       	brne	.-14     	; 0xb44 <__udivmodqi4_loop>
 b52:	80 95       	com	r24
 b54:	08 95       	ret

00000b56 <__divmodhi4>:
 b56:	97 fb       	bst	r25, 7
 b58:	07 2e       	mov	r0, r23
 b5a:	16 f4       	brtc	.+4      	; 0xb60 <__divmodhi4+0xa>
 b5c:	00 94       	com	r0
 b5e:	06 d0       	rcall	.+12     	; 0xb6c <__divmodhi4_neg1>
 b60:	77 fd       	sbrc	r23, 7
 b62:	08 d0       	rcall	.+16     	; 0xb74 <__divmodhi4_neg2>
 b64:	0b d0       	rcall	.+22     	; 0xb7c <__udivmodhi4>
 b66:	07 fc       	sbrc	r0, 7
 b68:	05 d0       	rcall	.+10     	; 0xb74 <__divmodhi4_neg2>
 b6a:	3e f4       	brtc	.+14     	; 0xb7a <__divmodhi4_exit>

00000b6c <__divmodhi4_neg1>:
 b6c:	90 95       	com	r25
 b6e:	81 95       	neg	r24
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	08 95       	ret

00000b74 <__divmodhi4_neg2>:
 b74:	70 95       	com	r23
 b76:	61 95       	neg	r22
 b78:	7f 4f       	sbci	r23, 0xFF	; 255

00000b7a <__divmodhi4_exit>:
 b7a:	08 95       	ret

00000b7c <__udivmodhi4>:
 b7c:	aa 1b       	sub	r26, r26
 b7e:	bb 1b       	sub	r27, r27
 b80:	51 e1       	ldi	r21, 0x11	; 17
 b82:	07 c0       	rjmp	.+14     	; 0xb92 <__udivmodhi4_ep>

00000b84 <__udivmodhi4_loop>:
 b84:	aa 1f       	adc	r26, r26
 b86:	bb 1f       	adc	r27, r27
 b88:	a6 17       	cp	r26, r22
 b8a:	b7 07       	cpc	r27, r23
 b8c:	10 f0       	brcs	.+4      	; 0xb92 <__udivmodhi4_ep>
 b8e:	a6 1b       	sub	r26, r22
 b90:	b7 0b       	sbc	r27, r23

00000b92 <__udivmodhi4_ep>:
 b92:	88 1f       	adc	r24, r24
 b94:	99 1f       	adc	r25, r25
 b96:	5a 95       	dec	r21
 b98:	a9 f7       	brne	.-22     	; 0xb84 <__udivmodhi4_loop>
 b9a:	80 95       	com	r24
 b9c:	90 95       	com	r25
 b9e:	bc 01       	movw	r22, r24
 ba0:	cd 01       	movw	r24, r26
 ba2:	08 95       	ret

00000ba4 <do_rand>:
 ba4:	8f 92       	push	r8
 ba6:	9f 92       	push	r9
 ba8:	af 92       	push	r10
 baa:	bf 92       	push	r11
 bac:	cf 92       	push	r12
 bae:	df 92       	push	r13
 bb0:	ef 92       	push	r14
 bb2:	ff 92       	push	r15
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	ec 01       	movw	r28, r24
 bba:	68 81       	ld	r22, Y
 bbc:	79 81       	ldd	r23, Y+1	; 0x01
 bbe:	8a 81       	ldd	r24, Y+2	; 0x02
 bc0:	9b 81       	ldd	r25, Y+3	; 0x03
 bc2:	61 15       	cp	r22, r1
 bc4:	71 05       	cpc	r23, r1
 bc6:	81 05       	cpc	r24, r1
 bc8:	91 05       	cpc	r25, r1
 bca:	21 f4       	brne	.+8      	; 0xbd4 <do_rand+0x30>
 bcc:	64 e2       	ldi	r22, 0x24	; 36
 bce:	79 ed       	ldi	r23, 0xD9	; 217
 bd0:	8b e5       	ldi	r24, 0x5B	; 91
 bd2:	97 e0       	ldi	r25, 0x07	; 7
 bd4:	2d e1       	ldi	r18, 0x1D	; 29
 bd6:	33 ef       	ldi	r19, 0xF3	; 243
 bd8:	41 e0       	ldi	r20, 0x01	; 1
 bda:	50 e0       	ldi	r21, 0x00	; 0
 bdc:	38 d0       	rcall	.+112    	; 0xc4e <__divmodsi4>
 bde:	49 01       	movw	r8, r18
 be0:	5a 01       	movw	r10, r20
 be2:	9b 01       	movw	r18, r22
 be4:	ac 01       	movw	r20, r24
 be6:	a7 ea       	ldi	r26, 0xA7	; 167
 be8:	b1 e4       	ldi	r27, 0x41	; 65
 bea:	4d d0       	rcall	.+154    	; 0xc86 <__muluhisi3>
 bec:	6b 01       	movw	r12, r22
 bee:	7c 01       	movw	r14, r24
 bf0:	ac ee       	ldi	r26, 0xEC	; 236
 bf2:	b4 ef       	ldi	r27, 0xF4	; 244
 bf4:	a5 01       	movw	r20, r10
 bf6:	94 01       	movw	r18, r8
 bf8:	52 d0       	rcall	.+164    	; 0xc9e <__mulohisi3>
 bfa:	dc 01       	movw	r26, r24
 bfc:	cb 01       	movw	r24, r22
 bfe:	8c 0d       	add	r24, r12
 c00:	9d 1d       	adc	r25, r13
 c02:	ae 1d       	adc	r26, r14
 c04:	bf 1d       	adc	r27, r15
 c06:	b7 ff       	sbrs	r27, 7
 c08:	03 c0       	rjmp	.+6      	; 0xc10 <do_rand+0x6c>
 c0a:	01 97       	sbiw	r24, 0x01	; 1
 c0c:	a1 09       	sbc	r26, r1
 c0e:	b0 48       	sbci	r27, 0x80	; 128
 c10:	88 83       	st	Y, r24
 c12:	99 83       	std	Y+1, r25	; 0x01
 c14:	aa 83       	std	Y+2, r26	; 0x02
 c16:	bb 83       	std	Y+3, r27	; 0x03
 c18:	9f 77       	andi	r25, 0x7F	; 127
 c1a:	df 91       	pop	r29
 c1c:	cf 91       	pop	r28
 c1e:	ff 90       	pop	r15
 c20:	ef 90       	pop	r14
 c22:	df 90       	pop	r13
 c24:	cf 90       	pop	r12
 c26:	bf 90       	pop	r11
 c28:	af 90       	pop	r10
 c2a:	9f 90       	pop	r9
 c2c:	8f 90       	pop	r8
 c2e:	08 95       	ret

00000c30 <rand_r>:
 c30:	b9 cf       	rjmp	.-142    	; 0xba4 <do_rand>

00000c32 <rand>:
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	91 e0       	ldi	r25, 0x01	; 1
 c36:	b6 cf       	rjmp	.-148    	; 0xba4 <do_rand>

00000c38 <srand>:
 c38:	a0 e0       	ldi	r26, 0x00	; 0
 c3a:	b0 e0       	ldi	r27, 0x00	; 0
 c3c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 c40:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 c44:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 c48:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 c4c:	08 95       	ret

00000c4e <__divmodsi4>:
 c4e:	05 2e       	mov	r0, r21
 c50:	97 fb       	bst	r25, 7
 c52:	16 f4       	brtc	.+4      	; 0xc58 <__divmodsi4+0xa>
 c54:	00 94       	com	r0
 c56:	0f d0       	rcall	.+30     	; 0xc76 <__negsi2>
 c58:	57 fd       	sbrc	r21, 7
 c5a:	05 d0       	rcall	.+10     	; 0xc66 <__divmodsi4_neg2>
 c5c:	24 d0       	rcall	.+72     	; 0xca6 <__udivmodsi4>
 c5e:	07 fc       	sbrc	r0, 7
 c60:	02 d0       	rcall	.+4      	; 0xc66 <__divmodsi4_neg2>
 c62:	46 f4       	brtc	.+16     	; 0xc74 <__divmodsi4_exit>
 c64:	08 c0       	rjmp	.+16     	; 0xc76 <__negsi2>

00000c66 <__divmodsi4_neg2>:
 c66:	50 95       	com	r21
 c68:	40 95       	com	r20
 c6a:	30 95       	com	r19
 c6c:	21 95       	neg	r18
 c6e:	3f 4f       	sbci	r19, 0xFF	; 255
 c70:	4f 4f       	sbci	r20, 0xFF	; 255
 c72:	5f 4f       	sbci	r21, 0xFF	; 255

00000c74 <__divmodsi4_exit>:
 c74:	08 95       	ret

00000c76 <__negsi2>:
 c76:	90 95       	com	r25
 c78:	80 95       	com	r24
 c7a:	70 95       	com	r23
 c7c:	61 95       	neg	r22
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	08 95       	ret

00000c86 <__muluhisi3>:
 c86:	31 d0       	rcall	.+98     	; 0xcea <__umulhisi3>
 c88:	a5 9f       	mul	r26, r21
 c8a:	90 0d       	add	r25, r0
 c8c:	b4 9f       	mul	r27, r20
 c8e:	90 0d       	add	r25, r0
 c90:	a4 9f       	mul	r26, r20
 c92:	80 0d       	add	r24, r0
 c94:	91 1d       	adc	r25, r1
 c96:	11 24       	eor	r1, r1
 c98:	08 95       	ret

00000c9a <__mulshisi3>:
 c9a:	b7 ff       	sbrs	r27, 7
 c9c:	f4 cf       	rjmp	.-24     	; 0xc86 <__muluhisi3>

00000c9e <__mulohisi3>:
 c9e:	f3 df       	rcall	.-26     	; 0xc86 <__muluhisi3>
 ca0:	82 1b       	sub	r24, r18
 ca2:	93 0b       	sbc	r25, r19
 ca4:	08 95       	ret

00000ca6 <__udivmodsi4>:
 ca6:	a1 e2       	ldi	r26, 0x21	; 33
 ca8:	1a 2e       	mov	r1, r26
 caa:	aa 1b       	sub	r26, r26
 cac:	bb 1b       	sub	r27, r27
 cae:	fd 01       	movw	r30, r26
 cb0:	0d c0       	rjmp	.+26     	; 0xccc <__udivmodsi4_ep>

00000cb2 <__udivmodsi4_loop>:
 cb2:	aa 1f       	adc	r26, r26
 cb4:	bb 1f       	adc	r27, r27
 cb6:	ee 1f       	adc	r30, r30
 cb8:	ff 1f       	adc	r31, r31
 cba:	a2 17       	cp	r26, r18
 cbc:	b3 07       	cpc	r27, r19
 cbe:	e4 07       	cpc	r30, r20
 cc0:	f5 07       	cpc	r31, r21
 cc2:	20 f0       	brcs	.+8      	; 0xccc <__udivmodsi4_ep>
 cc4:	a2 1b       	sub	r26, r18
 cc6:	b3 0b       	sbc	r27, r19
 cc8:	e4 0b       	sbc	r30, r20
 cca:	f5 0b       	sbc	r31, r21

00000ccc <__udivmodsi4_ep>:
 ccc:	66 1f       	adc	r22, r22
 cce:	77 1f       	adc	r23, r23
 cd0:	88 1f       	adc	r24, r24
 cd2:	99 1f       	adc	r25, r25
 cd4:	1a 94       	dec	r1
 cd6:	69 f7       	brne	.-38     	; 0xcb2 <__udivmodsi4_loop>
 cd8:	60 95       	com	r22
 cda:	70 95       	com	r23
 cdc:	80 95       	com	r24
 cde:	90 95       	com	r25
 ce0:	9b 01       	movw	r18, r22
 ce2:	ac 01       	movw	r20, r24
 ce4:	bd 01       	movw	r22, r26
 ce6:	cf 01       	movw	r24, r30
 ce8:	08 95       	ret

00000cea <__umulhisi3>:
 cea:	a2 9f       	mul	r26, r18
 cec:	b0 01       	movw	r22, r0
 cee:	b3 9f       	mul	r27, r19
 cf0:	c0 01       	movw	r24, r0
 cf2:	a3 9f       	mul	r26, r19
 cf4:	70 0d       	add	r23, r0
 cf6:	81 1d       	adc	r24, r1
 cf8:	11 24       	eor	r1, r1
 cfa:	91 1d       	adc	r25, r1
 cfc:	b2 9f       	mul	r27, r18
 cfe:	70 0d       	add	r23, r0
 d00:	81 1d       	adc	r24, r1
 d02:	11 24       	eor	r1, r1
 d04:	91 1d       	adc	r25, r1
 d06:	08 95       	ret

00000d08 <_exit>:
 d08:	f8 94       	cli

00000d0a <__stop_program>:
 d0a:	ff cf       	rjmp	.-2      	; 0xd0a <__stop_program>
