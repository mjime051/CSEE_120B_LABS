
mjime051_lab9_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000006a4  00000738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  00000748  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009cc  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  00001a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ab  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000119  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fa 00       	.word	0x00fa	; ????
  8e:	04 01       	movw	r0, r8
  90:	0c 01       	movw	r0, r24
  92:	13 01       	movw	r2, r6
  94:	24 01       	movw	r4, r8
  96:	30 01       	movw	r6, r0
  98:	2a 01       	movw	r4, r20
  9a:	34 01       	movw	r6, r8
  9c:	44 01       	movw	r8, r8
  9e:	49 01       	movw	r8, r18
  a0:	81 01       	movw	r16, r2
  a2:	4b 01       	movw	r8, r22
  a4:	81 01       	movw	r16, r2
  a6:	59 01       	movw	r10, r18
  a8:	81 01       	movw	r16, r2
  aa:	6c 01       	movw	r12, r24

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 ea       	ldi	r30, 0xA4	; 164
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a0 31       	cpi	r26, 0x10	; 16
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a0 e1       	ldi	r26, 0x10	; 16
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a6 31       	cpi	r26, 0x16	; 22
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	11 d1       	rcall	.+546    	; 0x306 <main>
  e4:	dd c2       	rjmp	.+1466   	; 0x6a0 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <set_PWM>:
#include <avr/io.h>

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	6b 01       	movw	r12, r22
  f2:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
  f4:	9b 01       	movw	r18, r22
  f6:	ac 01       	movw	r20, r24
  f8:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <current_frequency.1604>
  fc:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <current_frequency.1604+0x1>
 100:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <current_frequency.1604+0x2>
 104:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <current_frequency.1604+0x3>
 108:	0c d1       	rcall	.+536    	; 0x322 <__cmpsf2>
 10a:	88 23       	and	r24, r24
 10c:	09 f4       	brne	.+2      	; 0x110 <set_PWM+0x28>
 10e:	4f c0       	rjmp	.+158    	; 0x1ae <set_PWM+0xc6>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	a9 01       	movw	r20, r18
 116:	c7 01       	movw	r24, r14
 118:	b6 01       	movw	r22, r12
 11a:	03 d1       	rcall	.+518    	; 0x322 <__cmpsf2>
 11c:	81 11       	cpse	r24, r1
 11e:	06 c0       	rjmp	.+12     	; 0x12c <set_PWM+0x44>
 120:	e1 e9       	ldi	r30, 0x91	; 145
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 70       	andi	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
 12a:	05 c0       	rjmp	.+10     	; 0x136 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 12c:	e1 e9       	ldi	r30, 0x91	; 145
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	83 60       	ori	r24, 0x03	; 3
 134:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 136:	28 e5       	ldi	r18, 0x58	; 88
 138:	39 e3       	ldi	r19, 0x39	; 57
 13a:	44 e7       	ldi	r20, 0x74	; 116
 13c:	5f e3       	ldi	r21, 0x3F	; 63
 13e:	c7 01       	movw	r24, r14
 140:	b6 01       	movw	r22, r12
 142:	ef d0       	rcall	.+478    	; 0x322 <__cmpsf2>
 144:	88 23       	and	r24, r24
 146:	3c f4       	brge	.+14     	; 0x156 <set_PWM+0x6e>
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 150:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 154:	23 c0       	rjmp	.+70     	; 0x19c <set_PWM+0xb4>
		
		// prevents OCR0A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	34 e2       	ldi	r19, 0x24	; 36
 15a:	44 ef       	ldi	r20, 0xF4	; 244
 15c:	56 e4       	ldi	r21, 0x46	; 70
 15e:	c7 01       	movw	r24, r14
 160:	b6 01       	movw	r22, r12
 162:	2e d2       	rcall	.+1116   	; 0x5c0 <__gesf2>
 164:	18 16       	cp	r1, r24
 166:	2c f4       	brge	.+10     	; 0x172 <set_PWM+0x8a>
 168:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 16c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 170:	15 c0       	rjmp	.+42     	; 0x19c <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	53 e4       	ldi	r21, 0x43	; 67
 17a:	c7 01       	movw	r24, r14
 17c:	b6 01       	movw	r22, r12
 17e:	24 d2       	rcall	.+1096   	; 0x5c8 <__mulsf3>
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	74 e2       	ldi	r23, 0x24	; 36
 188:	84 ef       	ldi	r24, 0xF4	; 244
 18a:	9a e4       	ldi	r25, 0x4A	; 74
 18c:	ce d0       	rcall	.+412    	; 0x32a <__divsf3>
 18e:	35 d1       	rcall	.+618    	; 0x3fa <__fixsfsi>
 190:	61 50       	subi	r22, 0x01	; 1
 192:	71 09       	sbc	r23, r1
 194:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 198:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT0 = 0; // resets counter
 19c:	16 bc       	out	0x26, r1	; 38
		current_frequency = frequency; // Updates the current frequency
 19e:	c0 92 11 01 	sts	0x0111, r12	; 0x800111 <current_frequency.1604>
 1a2:	d0 92 12 01 	sts	0x0112, r13	; 0x800112 <current_frequency.1604+0x1>
 1a6:	e0 92 13 01 	sts	0x0113, r14	; 0x800113 <current_frequency.1604+0x2>
 1aa:	f0 92 14 01 	sts	0x0114, r15	; 0x800114 <current_frequency.1604+0x3>
	}
}
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	08 95       	ret

000001b8 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM0A0);
 1b8:	80 e4       	ldi	r24, 0x40	; 64
 1ba:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM02) | (1 << CS01) | (1 << CS00);
 1be:	8b e0       	ldi	r24, 0x0B	; 11
 1c0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	cb 01       	movw	r24, r22
 1ca:	8e cf       	rjmp	.-228    	; 0xe8 <set_PWM>
 1cc:	08 95       	ret

000001ce <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
 1ce:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
 1d2:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1d6:	08 95       	ret

000001d8 <Tick>:

enum SM_STATES{INIT, OFF, OFF_BUFFER, WAIT, INC_BUFFER, INCREMENT, DEC_BUFFER, DECREMENT} state;

unsigned short soundArray[] = {261.63, 293.66, 329.63, 349.23, 392.0, 440.0, 493.88, 523.25};

void Tick(unsigned char button) {
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
	static char itr;
	switch(state) {
 1dc:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <state>
 1e0:	82 2f       	mov	r24, r18
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	88 30       	cpi	r24, 0x08	; 8
 1e6:	91 05       	cpc	r25, r1
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <Tick+0x14>
 1ea:	42 c0       	rjmp	.+132    	; 0x270 <Tick+0x98>
 1ec:	fc 01       	movw	r30, r24
 1ee:	ea 5b       	subi	r30, 0xBA	; 186
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	4d c2       	rjmp	.+1178   	; 0x68e <__tablejump2__>
		case INIT:
			PWM_off();
 1f4:	ec df       	rcall	.-40     	; 0x1ce <PWM_off>
 1f6:	c1 30       	cpi	r28, 0x01	; 1
			if (button == 0x01)
 1f8:	19 f4       	brne	.+6      	; 0x200 <Tick+0x28>
 1fa:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <state>
			{
				state = INIT;
 1fe:	44 c0       	rjmp	.+136    	; 0x288 <Tick+0xb0>
 200:	81 e0       	ldi	r24, 0x01	; 1
			}
			else if(button != 0x01){
				state = OFF;
 202:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 206:	45 c0       	rjmp	.+138    	; 0x292 <Tick+0xba>
 208:	c1 30       	cpi	r28, 0x01	; 1
			}
			break;
		case OFF:
			if (button == 0x01)
 20a:	09 f0       	breq	.+2      	; 0x20e <Tick+0x36>
 20c:	42 c0       	rjmp	.+132    	; 0x292 <Tick+0xba>
 20e:	82 e0       	ldi	r24, 0x02	; 2
			{
				state = OFF_BUFFER;
 210:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
				PWM_on();
 214:	d1 df       	rcall	.-94     	; 0x1b8 <PWM_on>
 216:	2c c0       	rjmp	.+88     	; 0x270 <Tick+0x98>
 218:	c1 30       	cpi	r28, 0x01	; 1
			}
			break;
		case OFF_BUFFER:
			if(button == 0x01){
 21a:	09 f4       	brne	.+2      	; 0x21e <Tick+0x46>
 21c:	72 c0       	rjmp	.+228    	; 0x302 <Tick+0x12a>
 21e:	83 e0       	ldi	r24, 0x03	; 3
				state = OFF_BUFFER;	
			}
			else{
				state = WAIT;
 220:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 224:	38 c0       	rjmp	.+112    	; 0x296 <Tick+0xbe>
 226:	c1 30       	cpi	r28, 0x01	; 1
			}
			break;
		case WAIT:
			if (button == 0x01)
 228:	19 f4       	brne	.+6      	; 0x230 <Tick+0x58>
 22a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <state>
			{
				state = INIT;
 22e:	2c c0       	rjmp	.+88     	; 0x288 <Tick+0xb0>
 230:	c2 30       	cpi	r28, 0x02	; 2
			}
			else if (button == 0x02)
 232:	21 f4       	brne	.+8      	; 0x23c <Tick+0x64>
 234:	84 e0       	ldi	r24, 0x04	; 4
			{
				//PWM_on();
				state = INC_BUFFER;
 236:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 23a:	63 c0       	rjmp	.+198    	; 0x302 <Tick+0x12a>
 23c:	c4 30       	cpi	r28, 0x04	; 4
			}
			else if (button == 0x04)
 23e:	59 f5       	brne	.+86     	; 0x296 <Tick+0xbe>
 240:	86 e0       	ldi	r24, 0x06	; 6
			{
				//PWM_on();
				state = DEC_BUFFER;
 242:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 246:	5d c0       	rjmp	.+186    	; 0x302 <Tick+0x12a>
 248:	c2 30       	cpi	r28, 0x02	; 2
			{
				state = WAIT;
			}
			break;
		case INC_BUFFER:
			state = (button == 0x02) ? INC_BUFFER : INCREMENT;
 24a:	09 f0       	breq	.+2      	; 0x24e <Tick+0x76>
 24c:	25 e0       	ldi	r18, 0x05	; 5
 24e:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <state>
 252:	0e c0       	rjmp	.+28     	; 0x270 <Tick+0x98>
			break;
 254:	c4 30       	cpi	r28, 0x04	; 4
		case DEC_BUFFER:
			state = (button == 0x04) ? DEC_BUFFER : DECREMENT;
 256:	09 f0       	breq	.+2      	; 0x25a <Tick+0x82>
 258:	27 e0       	ldi	r18, 0x07	; 7
 25a:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <state>
 25e:	08 c0       	rjmp	.+16     	; 0x270 <Tick+0x98>
			break;
 260:	83 e0       	ldi	r24, 0x03	; 3
		case INCREMENT:
			state = WAIT;
 262:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 266:	17 c0       	rjmp	.+46     	; 0x296 <Tick+0xbe>
			break;
 268:	83 e0       	ldi	r24, 0x03	; 3
		case DECREMENT:
			state = WAIT;
 26a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 26e:	13 c0       	rjmp	.+38     	; 0x296 <Tick+0xbe>
			break;
 270:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <state>
		default:
			break;
	}
	
	switch(state){
 274:	8e 2f       	mov	r24, r30
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	88 30       	cpi	r24, 0x08	; 8
 27a:	91 05       	cpc	r25, r1
 27c:	08 f0       	brcs	.+2      	; 0x280 <Tick+0xa8>
 27e:	3f c0       	rjmp	.+126    	; 0x2fe <Tick+0x126>
 280:	fc 01       	movw	r30, r24
 282:	e2 5b       	subi	r30, 0xB2	; 178
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	03 c2       	rjmp	.+1030   	; 0x68e <__tablejump2__>
 288:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		case INIT:
		itr = 0x00;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
		PORTD = 0xFF;
 28e:	8b b9       	out	0x0b, r24	; 11
 290:	38 c0       	rjmp	.+112    	; 0x302 <Tick+0x12a>
			break;
 292:	1b b8       	out	0x0b, r1	; 11
		case OFF:
		PORTD = 0x00;
 294:	36 c0       	rjmp	.+108    	; 0x302 <Tick+0x12a>
			break;
 296:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
		case OFF_BUFFER:
			break;
		case WAIT:
			set_PWM(soundArray[itr]);
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	e0 50       	subi	r30, 0x00	; 0
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	60 81       	ld	r22, Z
 2a6:	71 81       	ldd	r23, Z+1	; 0x01
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	d7 d0       	rcall	.+430    	; 0x45c <__floatunsisf>
 2ae:	1c df       	rcall	.-456    	; 0xe8 <set_PWM>
 2b0:	28 c0       	rjmp	.+80     	; 0x302 <Tick+0x12a>
			break;
 2b2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
		case INC_BUFFER:
			break;
		case INCREMENT:
			if (itr < 7)
 2b6:	e7 30       	cpi	r30, 0x07	; 7
 2b8:	20 f5       	brcc	.+72     	; 0x302 <Tick+0x12a>
 2ba:	ef 5f       	subi	r30, 0xFF	; 255
			{
				itr++;
 2bc:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__data_end>
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
				set_PWM(soundArray[itr]);
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	e0 50       	subi	r30, 0x00	; 0
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	60 81       	ld	r22, Z
 2cc:	71 81       	ldd	r23, Z+1	; 0x01
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	c4 d0       	rcall	.+392    	; 0x45c <__floatunsisf>
 2d4:	09 df       	rcall	.-494    	; 0xe8 <set_PWM>
 2d6:	15 c0       	rjmp	.+42     	; 0x302 <Tick+0x12a>
 2d8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
			}
			break;
		case DEC_BUFFER:
			break;
		case DECREMENT:
			if (itr > 0)
 2dc:	ee 23       	and	r30, r30
 2de:	89 f0       	breq	.+34     	; 0x302 <Tick+0x12a>
 2e0:	e1 50       	subi	r30, 0x01	; 1
			{
				itr--;
 2e2:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__data_end>
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
				set_PWM(soundArray[itr]);
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	e0 50       	subi	r30, 0x00	; 0
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	60 81       	ld	r22, Z
 2f2:	71 81       	ldd	r23, Z+1	; 0x01
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	b1 d0       	rcall	.+354    	; 0x45c <__floatunsisf>
 2fa:	f6 de       	rcall	.-532    	; 0xe8 <set_PWM>
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <Tick+0x12a>
 2fe:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			}
			break;
		default:
			itr = 0x00;
 302:	cf 91       	pop	r28
			break;
	}
}
 304:	08 95       	ret

00000306 <main>:
 306:	8f ef       	ldi	r24, 0xFF	; 255
int main(void)
{
    /* Replace with your application code */
	DDRB = 0xFF; PORTB = 0x00;
 308:	84 b9       	out	0x04, r24	; 4
 30a:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;
 30c:	11 b8       	out	0x01, r1	; 1
 30e:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0X00;
 310:	8a b9       	out	0x0a, r24	; 10
 312:	1b b8       	out	0x0b, r1	; 11
	unsigned char button = 0x00;
	state = INIT;
 314:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <state>
	//PWM_on();
	
    while (1) 
    {
		button = ~PINA & 0x07;
 318:	80 b1       	in	r24, 0x00	; 0
		Tick(button);
 31a:	80 95       	com	r24
 31c:	87 70       	andi	r24, 0x07	; 7
 31e:	5c df       	rcall	.-328    	; 0x1d8 <Tick>
 320:	fb cf       	rjmp	.-10     	; 0x318 <main+0x12>

00000322 <__cmpsf2>:
 322:	d9 d0       	rcall	.+434    	; 0x4d6 <__fp_cmp>
 324:	08 f4       	brcc	.+2      	; 0x328 <__cmpsf2+0x6>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	08 95       	ret

0000032a <__divsf3>:
 32a:	0c d0       	rcall	.+24     	; 0x344 <__divsf3x>
 32c:	0f c1       	rjmp	.+542    	; 0x54c <__fp_round>
 32e:	07 d1       	rcall	.+526    	; 0x53e <__fp_pscB>
 330:	40 f0       	brcs	.+16     	; 0x342 <__divsf3+0x18>
 332:	fe d0       	rcall	.+508    	; 0x530 <__fp_pscA>
 334:	30 f0       	brcs	.+12     	; 0x342 <__divsf3+0x18>
 336:	21 f4       	brne	.+8      	; 0x340 <__divsf3+0x16>
 338:	5f 3f       	cpi	r21, 0xFF	; 255
 33a:	19 f0       	breq	.+6      	; 0x342 <__divsf3+0x18>
 33c:	f0 c0       	rjmp	.+480    	; 0x51e <__fp_inf>
 33e:	51 11       	cpse	r21, r1
 340:	39 c1       	rjmp	.+626    	; 0x5b4 <__fp_szero>
 342:	f3 c0       	rjmp	.+486    	; 0x52a <__fp_nan>

00000344 <__divsf3x>:
 344:	14 d1       	rcall	.+552    	; 0x56e <__fp_split3>
 346:	98 f3       	brcs	.-26     	; 0x32e <__divsf3+0x4>

00000348 <__divsf3_pse>:
 348:	99 23       	and	r25, r25
 34a:	c9 f3       	breq	.-14     	; 0x33e <__divsf3+0x14>
 34c:	55 23       	and	r21, r21
 34e:	b1 f3       	breq	.-20     	; 0x33c <__divsf3+0x12>
 350:	95 1b       	sub	r25, r21
 352:	55 0b       	sbc	r21, r21
 354:	bb 27       	eor	r27, r27
 356:	aa 27       	eor	r26, r26
 358:	62 17       	cp	r22, r18
 35a:	73 07       	cpc	r23, r19
 35c:	84 07       	cpc	r24, r20
 35e:	38 f0       	brcs	.+14     	; 0x36e <__divsf3_pse+0x26>
 360:	9f 5f       	subi	r25, 0xFF	; 255
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	44 1f       	adc	r20, r20
 36a:	aa 1f       	adc	r26, r26
 36c:	a9 f3       	breq	.-22     	; 0x358 <__divsf3_pse+0x10>
 36e:	33 d0       	rcall	.+102    	; 0x3d6 <__divsf3_pse+0x8e>
 370:	0e 2e       	mov	r0, r30
 372:	3a f0       	brmi	.+14     	; 0x382 <__divsf3_pse+0x3a>
 374:	e0 e8       	ldi	r30, 0x80	; 128
 376:	30 d0       	rcall	.+96     	; 0x3d8 <__divsf3_pse+0x90>
 378:	91 50       	subi	r25, 0x01	; 1
 37a:	50 40       	sbci	r21, 0x00	; 0
 37c:	e6 95       	lsr	r30
 37e:	00 1c       	adc	r0, r0
 380:	ca f7       	brpl	.-14     	; 0x374 <__divsf3_pse+0x2c>
 382:	29 d0       	rcall	.+82     	; 0x3d6 <__divsf3_pse+0x8e>
 384:	fe 2f       	mov	r31, r30
 386:	27 d0       	rcall	.+78     	; 0x3d6 <__divsf3_pse+0x8e>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	88 1f       	adc	r24, r24
 38e:	bb 1f       	adc	r27, r27
 390:	26 17       	cp	r18, r22
 392:	37 07       	cpc	r19, r23
 394:	48 07       	cpc	r20, r24
 396:	ab 07       	cpc	r26, r27
 398:	b0 e8       	ldi	r27, 0x80	; 128
 39a:	09 f0       	breq	.+2      	; 0x39e <__divsf3_pse+0x56>
 39c:	bb 0b       	sbc	r27, r27
 39e:	80 2d       	mov	r24, r0
 3a0:	bf 01       	movw	r22, r30
 3a2:	ff 27       	eor	r31, r31
 3a4:	93 58       	subi	r25, 0x83	; 131
 3a6:	5f 4f       	sbci	r21, 0xFF	; 255
 3a8:	2a f0       	brmi	.+10     	; 0x3b4 <__divsf3_pse+0x6c>
 3aa:	9e 3f       	cpi	r25, 0xFE	; 254
 3ac:	51 05       	cpc	r21, r1
 3ae:	68 f0       	brcs	.+26     	; 0x3ca <__divsf3_pse+0x82>
 3b0:	b6 c0       	rjmp	.+364    	; 0x51e <__fp_inf>
 3b2:	00 c1       	rjmp	.+512    	; 0x5b4 <__fp_szero>
 3b4:	5f 3f       	cpi	r21, 0xFF	; 255
 3b6:	ec f3       	brlt	.-6      	; 0x3b2 <__divsf3_pse+0x6a>
 3b8:	98 3e       	cpi	r25, 0xE8	; 232
 3ba:	dc f3       	brlt	.-10     	; 0x3b2 <__divsf3_pse+0x6a>
 3bc:	86 95       	lsr	r24
 3be:	77 95       	ror	r23
 3c0:	67 95       	ror	r22
 3c2:	b7 95       	ror	r27
 3c4:	f7 95       	ror	r31
 3c6:	9f 5f       	subi	r25, 0xFF	; 255
 3c8:	c9 f7       	brne	.-14     	; 0x3bc <__divsf3_pse+0x74>
 3ca:	88 0f       	add	r24, r24
 3cc:	91 1d       	adc	r25, r1
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	97 f9       	bld	r25, 7
 3d4:	08 95       	ret
 3d6:	e1 e0       	ldi	r30, 0x01	; 1
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	bb 1f       	adc	r27, r27
 3e0:	62 17       	cp	r22, r18
 3e2:	73 07       	cpc	r23, r19
 3e4:	84 07       	cpc	r24, r20
 3e6:	ba 07       	cpc	r27, r26
 3e8:	20 f0       	brcs	.+8      	; 0x3f2 <__divsf3_pse+0xaa>
 3ea:	62 1b       	sub	r22, r18
 3ec:	73 0b       	sbc	r23, r19
 3ee:	84 0b       	sbc	r24, r20
 3f0:	ba 0b       	sbc	r27, r26
 3f2:	ee 1f       	adc	r30, r30
 3f4:	88 f7       	brcc	.-30     	; 0x3d8 <__divsf3_pse+0x90>
 3f6:	e0 95       	com	r30
 3f8:	08 95       	ret

000003fa <__fixsfsi>:
 3fa:	04 d0       	rcall	.+8      	; 0x404 <__fixunssfsi>
 3fc:	68 94       	set
 3fe:	b1 11       	cpse	r27, r1
 400:	d9 c0       	rjmp	.+434    	; 0x5b4 <__fp_szero>
 402:	08 95       	ret

00000404 <__fixunssfsi>:
 404:	bc d0       	rcall	.+376    	; 0x57e <__fp_splitA>
 406:	88 f0       	brcs	.+34     	; 0x42a <__fixunssfsi+0x26>
 408:	9f 57       	subi	r25, 0x7F	; 127
 40a:	90 f0       	brcs	.+36     	; 0x430 <__fixunssfsi+0x2c>
 40c:	b9 2f       	mov	r27, r25
 40e:	99 27       	eor	r25, r25
 410:	b7 51       	subi	r27, 0x17	; 23
 412:	a0 f0       	brcs	.+40     	; 0x43c <__fixunssfsi+0x38>
 414:	d1 f0       	breq	.+52     	; 0x44a <__fixunssfsi+0x46>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	1a f0       	brmi	.+6      	; 0x426 <__fixunssfsi+0x22>
 420:	ba 95       	dec	r27
 422:	c9 f7       	brne	.-14     	; 0x416 <__fixunssfsi+0x12>
 424:	12 c0       	rjmp	.+36     	; 0x44a <__fixunssfsi+0x46>
 426:	b1 30       	cpi	r27, 0x01	; 1
 428:	81 f0       	breq	.+32     	; 0x44a <__fixunssfsi+0x46>
 42a:	c3 d0       	rcall	.+390    	; 0x5b2 <__fp_zero>
 42c:	b1 e0       	ldi	r27, 0x01	; 1
 42e:	08 95       	ret
 430:	c0 c0       	rjmp	.+384    	; 0x5b2 <__fp_zero>
 432:	67 2f       	mov	r22, r23
 434:	78 2f       	mov	r23, r24
 436:	88 27       	eor	r24, r24
 438:	b8 5f       	subi	r27, 0xF8	; 248
 43a:	39 f0       	breq	.+14     	; 0x44a <__fixunssfsi+0x46>
 43c:	b9 3f       	cpi	r27, 0xF9	; 249
 43e:	cc f3       	brlt	.-14     	; 0x432 <__fixunssfsi+0x2e>
 440:	86 95       	lsr	r24
 442:	77 95       	ror	r23
 444:	67 95       	ror	r22
 446:	b3 95       	inc	r27
 448:	d9 f7       	brne	.-10     	; 0x440 <__fixunssfsi+0x3c>
 44a:	3e f4       	brtc	.+14     	; 0x45a <__fixunssfsi+0x56>
 44c:	90 95       	com	r25
 44e:	80 95       	com	r24
 450:	70 95       	com	r23
 452:	61 95       	neg	r22
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	08 95       	ret

0000045c <__floatunsisf>:
 45c:	e8 94       	clt
 45e:	09 c0       	rjmp	.+18     	; 0x472 <__floatsisf+0x12>

00000460 <__floatsisf>:
 460:	97 fb       	bst	r25, 7
 462:	3e f4       	brtc	.+14     	; 0x472 <__floatsisf+0x12>
 464:	90 95       	com	r25
 466:	80 95       	com	r24
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	8f 4f       	sbci	r24, 0xFF	; 255
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	99 23       	and	r25, r25
 474:	a9 f0       	breq	.+42     	; 0x4a0 <__floatsisf+0x40>
 476:	f9 2f       	mov	r31, r25
 478:	96 e9       	ldi	r25, 0x96	; 150
 47a:	bb 27       	eor	r27, r27
 47c:	93 95       	inc	r25
 47e:	f6 95       	lsr	r31
 480:	87 95       	ror	r24
 482:	77 95       	ror	r23
 484:	67 95       	ror	r22
 486:	b7 95       	ror	r27
 488:	f1 11       	cpse	r31, r1
 48a:	f8 cf       	rjmp	.-16     	; 0x47c <__floatsisf+0x1c>
 48c:	fa f4       	brpl	.+62     	; 0x4cc <__floatsisf+0x6c>
 48e:	bb 0f       	add	r27, r27
 490:	11 f4       	brne	.+4      	; 0x496 <__floatsisf+0x36>
 492:	60 ff       	sbrs	r22, 0
 494:	1b c0       	rjmp	.+54     	; 0x4cc <__floatsisf+0x6c>
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	16 c0       	rjmp	.+44     	; 0x4cc <__floatsisf+0x6c>
 4a0:	88 23       	and	r24, r24
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <__floatsisf+0x48>
 4a4:	96 e9       	ldi	r25, 0x96	; 150
 4a6:	11 c0       	rjmp	.+34     	; 0x4ca <__floatsisf+0x6a>
 4a8:	77 23       	and	r23, r23
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <__floatsisf+0x54>
 4ac:	9e e8       	ldi	r25, 0x8E	; 142
 4ae:	87 2f       	mov	r24, r23
 4b0:	76 2f       	mov	r23, r22
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <__floatsisf+0x5e>
 4b4:	66 23       	and	r22, r22
 4b6:	71 f0       	breq	.+28     	; 0x4d4 <__floatsisf+0x74>
 4b8:	96 e8       	ldi	r25, 0x86	; 134
 4ba:	86 2f       	mov	r24, r22
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	2a f0       	brmi	.+10     	; 0x4cc <__floatsisf+0x6c>
 4c2:	9a 95       	dec	r25
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	da f7       	brpl	.-10     	; 0x4c2 <__floatsisf+0x62>
 4cc:	88 0f       	add	r24, r24
 4ce:	96 95       	lsr	r25
 4d0:	87 95       	ror	r24
 4d2:	97 f9       	bld	r25, 7
 4d4:	08 95       	ret

000004d6 <__fp_cmp>:
 4d6:	99 0f       	add	r25, r25
 4d8:	00 08       	sbc	r0, r0
 4da:	55 0f       	add	r21, r21
 4dc:	aa 0b       	sbc	r26, r26
 4de:	e0 e8       	ldi	r30, 0x80	; 128
 4e0:	fe ef       	ldi	r31, 0xFE	; 254
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	e8 07       	cpc	r30, r24
 4e8:	f9 07       	cpc	r31, r25
 4ea:	c0 f0       	brcs	.+48     	; 0x51c <__fp_cmp+0x46>
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	e4 07       	cpc	r30, r20
 4f2:	f5 07       	cpc	r31, r21
 4f4:	98 f0       	brcs	.+38     	; 0x51c <__fp_cmp+0x46>
 4f6:	62 1b       	sub	r22, r18
 4f8:	73 0b       	sbc	r23, r19
 4fa:	84 0b       	sbc	r24, r20
 4fc:	95 0b       	sbc	r25, r21
 4fe:	39 f4       	brne	.+14     	; 0x50e <__fp_cmp+0x38>
 500:	0a 26       	eor	r0, r26
 502:	61 f0       	breq	.+24     	; 0x51c <__fp_cmp+0x46>
 504:	23 2b       	or	r18, r19
 506:	24 2b       	or	r18, r20
 508:	25 2b       	or	r18, r21
 50a:	21 f4       	brne	.+8      	; 0x514 <__fp_cmp+0x3e>
 50c:	08 95       	ret
 50e:	0a 26       	eor	r0, r26
 510:	09 f4       	brne	.+2      	; 0x514 <__fp_cmp+0x3e>
 512:	a1 40       	sbci	r26, 0x01	; 1
 514:	a6 95       	lsr	r26
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	81 1d       	adc	r24, r1
 51a:	81 1d       	adc	r24, r1
 51c:	08 95       	ret

0000051e <__fp_inf>:
 51e:	97 f9       	bld	r25, 7
 520:	9f 67       	ori	r25, 0x7F	; 127
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	08 95       	ret

0000052a <__fp_nan>:
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	80 ec       	ldi	r24, 0xC0	; 192
 52e:	08 95       	ret

00000530 <__fp_pscA>:
 530:	00 24       	eor	r0, r0
 532:	0a 94       	dec	r0
 534:	16 16       	cp	r1, r22
 536:	17 06       	cpc	r1, r23
 538:	18 06       	cpc	r1, r24
 53a:	09 06       	cpc	r0, r25
 53c:	08 95       	ret

0000053e <__fp_pscB>:
 53e:	00 24       	eor	r0, r0
 540:	0a 94       	dec	r0
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	05 06       	cpc	r0, r21
 54a:	08 95       	ret

0000054c <__fp_round>:
 54c:	09 2e       	mov	r0, r25
 54e:	03 94       	inc	r0
 550:	00 0c       	add	r0, r0
 552:	11 f4       	brne	.+4      	; 0x558 <__fp_round+0xc>
 554:	88 23       	and	r24, r24
 556:	52 f0       	brmi	.+20     	; 0x56c <__fp_round+0x20>
 558:	bb 0f       	add	r27, r27
 55a:	40 f4       	brcc	.+16     	; 0x56c <__fp_round+0x20>
 55c:	bf 2b       	or	r27, r31
 55e:	11 f4       	brne	.+4      	; 0x564 <__fp_round+0x18>
 560:	60 ff       	sbrs	r22, 0
 562:	04 c0       	rjmp	.+8      	; 0x56c <__fp_round+0x20>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__fp_split3>:
 56e:	57 fd       	sbrc	r21, 7
 570:	90 58       	subi	r25, 0x80	; 128
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	59 f0       	breq	.+22     	; 0x58e <__fp_splitA+0x10>
 578:	5f 3f       	cpi	r21, 0xFF	; 255
 57a:	71 f0       	breq	.+28     	; 0x598 <__fp_splitA+0x1a>
 57c:	47 95       	ror	r20

0000057e <__fp_splitA>:
 57e:	88 0f       	add	r24, r24
 580:	97 fb       	bst	r25, 7
 582:	99 1f       	adc	r25, r25
 584:	61 f0       	breq	.+24     	; 0x59e <__fp_splitA+0x20>
 586:	9f 3f       	cpi	r25, 0xFF	; 255
 588:	79 f0       	breq	.+30     	; 0x5a8 <__fp_splitA+0x2a>
 58a:	87 95       	ror	r24
 58c:	08 95       	ret
 58e:	12 16       	cp	r1, r18
 590:	13 06       	cpc	r1, r19
 592:	14 06       	cpc	r1, r20
 594:	55 1f       	adc	r21, r21
 596:	f2 cf       	rjmp	.-28     	; 0x57c <__fp_split3+0xe>
 598:	46 95       	lsr	r20
 59a:	f1 df       	rcall	.-30     	; 0x57e <__fp_splitA>
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__fp_splitA+0x30>
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	18 06       	cpc	r1, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	f1 cf       	rjmp	.-30     	; 0x58a <__fp_splitA+0xc>
 5a8:	86 95       	lsr	r24
 5aa:	71 05       	cpc	r23, r1
 5ac:	61 05       	cpc	r22, r1
 5ae:	08 94       	sec
 5b0:	08 95       	ret

000005b2 <__fp_zero>:
 5b2:	e8 94       	clt

000005b4 <__fp_szero>:
 5b4:	bb 27       	eor	r27, r27
 5b6:	66 27       	eor	r22, r22
 5b8:	77 27       	eor	r23, r23
 5ba:	cb 01       	movw	r24, r22
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__gesf2>:
 5c0:	8a df       	rcall	.-236    	; 0x4d6 <__fp_cmp>
 5c2:	08 f4       	brcc	.+2      	; 0x5c6 <__gesf2+0x6>
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	08 95       	ret

000005c8 <__mulsf3>:
 5c8:	0b d0       	rcall	.+22     	; 0x5e0 <__mulsf3x>
 5ca:	c0 cf       	rjmp	.-128    	; 0x54c <__fp_round>
 5cc:	b1 df       	rcall	.-158    	; 0x530 <__fp_pscA>
 5ce:	28 f0       	brcs	.+10     	; 0x5da <__mulsf3+0x12>
 5d0:	b6 df       	rcall	.-148    	; 0x53e <__fp_pscB>
 5d2:	18 f0       	brcs	.+6      	; 0x5da <__mulsf3+0x12>
 5d4:	95 23       	and	r25, r21
 5d6:	09 f0       	breq	.+2      	; 0x5da <__mulsf3+0x12>
 5d8:	a2 cf       	rjmp	.-188    	; 0x51e <__fp_inf>
 5da:	a7 cf       	rjmp	.-178    	; 0x52a <__fp_nan>
 5dc:	11 24       	eor	r1, r1
 5de:	ea cf       	rjmp	.-44     	; 0x5b4 <__fp_szero>

000005e0 <__mulsf3x>:
 5e0:	c6 df       	rcall	.-116    	; 0x56e <__fp_split3>
 5e2:	a0 f3       	brcs	.-24     	; 0x5cc <__mulsf3+0x4>

000005e4 <__mulsf3_pse>:
 5e4:	95 9f       	mul	r25, r21
 5e6:	d1 f3       	breq	.-12     	; 0x5dc <__mulsf3+0x14>
 5e8:	95 0f       	add	r25, r21
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	55 1f       	adc	r21, r21
 5ee:	62 9f       	mul	r22, r18
 5f0:	f0 01       	movw	r30, r0
 5f2:	72 9f       	mul	r23, r18
 5f4:	bb 27       	eor	r27, r27
 5f6:	f0 0d       	add	r31, r0
 5f8:	b1 1d       	adc	r27, r1
 5fa:	63 9f       	mul	r22, r19
 5fc:	aa 27       	eor	r26, r26
 5fe:	f0 0d       	add	r31, r0
 600:	b1 1d       	adc	r27, r1
 602:	aa 1f       	adc	r26, r26
 604:	64 9f       	mul	r22, r20
 606:	66 27       	eor	r22, r22
 608:	b0 0d       	add	r27, r0
 60a:	a1 1d       	adc	r26, r1
 60c:	66 1f       	adc	r22, r22
 60e:	82 9f       	mul	r24, r18
 610:	22 27       	eor	r18, r18
 612:	b0 0d       	add	r27, r0
 614:	a1 1d       	adc	r26, r1
 616:	62 1f       	adc	r22, r18
 618:	73 9f       	mul	r23, r19
 61a:	b0 0d       	add	r27, r0
 61c:	a1 1d       	adc	r26, r1
 61e:	62 1f       	adc	r22, r18
 620:	83 9f       	mul	r24, r19
 622:	a0 0d       	add	r26, r0
 624:	61 1d       	adc	r22, r1
 626:	22 1f       	adc	r18, r18
 628:	74 9f       	mul	r23, r20
 62a:	33 27       	eor	r19, r19
 62c:	a0 0d       	add	r26, r0
 62e:	61 1d       	adc	r22, r1
 630:	23 1f       	adc	r18, r19
 632:	84 9f       	mul	r24, r20
 634:	60 0d       	add	r22, r0
 636:	21 1d       	adc	r18, r1
 638:	82 2f       	mov	r24, r18
 63a:	76 2f       	mov	r23, r22
 63c:	6a 2f       	mov	r22, r26
 63e:	11 24       	eor	r1, r1
 640:	9f 57       	subi	r25, 0x7F	; 127
 642:	50 40       	sbci	r21, 0x00	; 0
 644:	8a f0       	brmi	.+34     	; 0x668 <__mulsf3_pse+0x84>
 646:	e1 f0       	breq	.+56     	; 0x680 <__mulsf3_pse+0x9c>
 648:	88 23       	and	r24, r24
 64a:	4a f0       	brmi	.+18     	; 0x65e <__mulsf3_pse+0x7a>
 64c:	ee 0f       	add	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	bb 1f       	adc	r27, r27
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	91 50       	subi	r25, 0x01	; 1
 65a:	50 40       	sbci	r21, 0x00	; 0
 65c:	a9 f7       	brne	.-22     	; 0x648 <__mulsf3_pse+0x64>
 65e:	9e 3f       	cpi	r25, 0xFE	; 254
 660:	51 05       	cpc	r21, r1
 662:	70 f0       	brcs	.+28     	; 0x680 <__mulsf3_pse+0x9c>
 664:	5c cf       	rjmp	.-328    	; 0x51e <__fp_inf>
 666:	a6 cf       	rjmp	.-180    	; 0x5b4 <__fp_szero>
 668:	5f 3f       	cpi	r21, 0xFF	; 255
 66a:	ec f3       	brlt	.-6      	; 0x666 <__mulsf3_pse+0x82>
 66c:	98 3e       	cpi	r25, 0xE8	; 232
 66e:	dc f3       	brlt	.-10     	; 0x666 <__mulsf3_pse+0x82>
 670:	86 95       	lsr	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b7 95       	ror	r27
 678:	f7 95       	ror	r31
 67a:	e7 95       	ror	r30
 67c:	9f 5f       	subi	r25, 0xFF	; 255
 67e:	c1 f7       	brne	.-16     	; 0x670 <__mulsf3_pse+0x8c>
 680:	fe 2b       	or	r31, r30
 682:	88 0f       	add	r24, r24
 684:	91 1d       	adc	r25, r1
 686:	96 95       	lsr	r25
 688:	87 95       	ror	r24
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__tablejump2__>:
 68e:	ee 0f       	add	r30, r30
 690:	ff 1f       	adc	r31, r31
 692:	00 24       	eor	r0, r0
 694:	00 1c       	adc	r0, r0
 696:	0b be       	out	0x3b, r0	; 59
 698:	07 90       	elpm	r0, Z+
 69a:	f6 91       	elpm	r31, Z
 69c:	e0 2d       	mov	r30, r0
 69e:	09 94       	ijmp

000006a0 <_exit>:
 6a0:	f8 94       	cli

000006a2 <__stop_program>:
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <__stop_program>
